
5_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080014a8  080014a8  000024a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014f4  080014f4  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080014f4  080014f4  000024f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080014fc  080014fc  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014fc  080014fc  000024fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001500  08001500  00002500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001504  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08001564  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001564  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d20  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000812  00000000  00000000  00004db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c8  00000000  00000000  000055c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001f0  00000000  00000000  00005890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aaf7  00000000  00000000  00005a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000033bc  00000000  00000000  00020577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6d07  00000000  00000000  00023933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea63a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001074  00000000  00000000  000ea680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000eb6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001490 	.word	0x08001490

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08001490 	.word	0x08001490

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
#include<stdio.h>
#include <stdint.h>
#include "stm32f446xx.h"
#include "uart.h"
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0


	uar2_tx_init();
 80002b4:	f000 f8f6 	bl	80004a4 <uar2_tx_init>

	while(1)
	{
		printf("hello form stm32......\n\r");
 80002b8:	4801      	ldr	r0, [pc, #4]	@ (80002c0 <main+0x10>)
 80002ba:	f000 fa7d 	bl	80007b8 <iprintf>
 80002be:	e7fb      	b.n	80002b8 <main+0x8>
 80002c0:	080014a8 	.word	0x080014a8

080002c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002c8:	bf00      	nop
 80002ca:	e7fd      	b.n	80002c8 <NMI_Handler+0x4>

080002cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d0:	bf00      	nop
 80002d2:	e7fd      	b.n	80002d0 <HardFault_Handler+0x4>

080002d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d8:	bf00      	nop
 80002da:	e7fd      	b.n	80002d8 <MemManage_Handler+0x4>

080002dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e0:	bf00      	nop
 80002e2:	e7fd      	b.n	80002e0 <BusFault_Handler+0x4>

080002e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e8:	bf00      	nop
 80002ea:	e7fd      	b.n	80002e8 <UsageFault_Handler+0x4>

080002ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr

08000316 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000316:	b580      	push	{r7, lr}
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800031a:	f000 f977 	bl	800060c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}

08000322 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000322:	b580      	push	{r7, lr}
 8000324:	b086      	sub	sp, #24
 8000326:	af00      	add	r7, sp, #0
 8000328:	60f8      	str	r0, [r7, #12]
 800032a:	60b9      	str	r1, [r7, #8]
 800032c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]
 8000332:	e00a      	b.n	800034a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000334:	f3af 8000 	nop.w
 8000338:	4601      	mov	r1, r0
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	1c5a      	adds	r2, r3, #1
 800033e:	60ba      	str	r2, [r7, #8]
 8000340:	b2ca      	uxtb	r2, r1
 8000342:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	3301      	adds	r3, #1
 8000348:	617b      	str	r3, [r7, #20]
 800034a:	697a      	ldr	r2, [r7, #20]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	429a      	cmp	r2, r3
 8000350:	dbf0      	blt.n	8000334 <_read+0x12>
  }

  return len;
 8000352:	687b      	ldr	r3, [r7, #4]
}
 8000354:	4618      	mov	r0, r3
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
 800036c:	e009      	b.n	8000382 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	60ba      	str	r2, [r7, #8]
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f888 	bl	800048c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	3301      	adds	r3, #1
 8000380:	617b      	str	r3, [r7, #20]
 8000382:	697a      	ldr	r2, [r7, #20]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	429a      	cmp	r2, r3
 8000388:	dbf1      	blt.n	800036e <_write+0x12>
  }
  return len;
 800038a:	687b      	ldr	r3, [r7, #4]
}
 800038c:	4618      	mov	r0, r3
 800038e:	3718      	adds	r7, #24
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <_close>:

int _close(int file)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800039c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003bc:	605a      	str	r2, [r3, #4]
  return 0;
 80003be:	2300      	movs	r3, #0
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <_isatty>:

int _isatty(int file)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003d4:	2301      	movs	r3, #1
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003e2:	b480      	push	{r7}
 80003e4:	b085      	sub	sp, #20
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	60f8      	str	r0, [r7, #12]
 80003ea:	60b9      	str	r1, [r7, #8]
 80003ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000404:	4a14      	ldr	r2, [pc, #80]	@ (8000458 <_sbrk+0x5c>)
 8000406:	4b15      	ldr	r3, [pc, #84]	@ (800045c <_sbrk+0x60>)
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000410:	4b13      	ldr	r3, [pc, #76]	@ (8000460 <_sbrk+0x64>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d102      	bne.n	800041e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000418:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <_sbrk+0x64>)
 800041a:	4a12      	ldr	r2, [pc, #72]	@ (8000464 <_sbrk+0x68>)
 800041c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800041e:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <_sbrk+0x64>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	693a      	ldr	r2, [r7, #16]
 8000428:	429a      	cmp	r2, r3
 800042a:	d207      	bcs.n	800043c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800042c:	f000 fa68 	bl	8000900 <__errno>
 8000430:	4603      	mov	r3, r0
 8000432:	220c      	movs	r2, #12
 8000434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	e009      	b.n	8000450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800043c:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <_sbrk+0x64>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000442:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <_sbrk+0x64>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	4a05      	ldr	r2, [pc, #20]	@ (8000460 <_sbrk+0x64>)
 800044c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800044e:	68fb      	ldr	r3, [r7, #12]
}
 8000450:	4618      	mov	r0, r3
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20020000 	.word	0x20020000
 800045c:	00000400 	.word	0x00000400
 8000460:	2000007c 	.word	0x2000007c
 8000464:	200001d0 	.word	0x200001d0

08000468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <SystemInit+0x20>)
 800046e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000472:	4a05      	ldr	r2, [pc, #20]	@ (8000488 <SystemInit+0x20>)
 8000474:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000478:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	e000ed00 	.word	0xe000ed00

0800048c <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart2_write(int ch);
int __io_putchar(int ch)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f000 f851 	bl	800053c <uart2_write>
	return ch;
 800049a:	687b      	ldr	r3, [r7, #4]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <uar2_tx_init>:
void uar2_tx_init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 80004a8:	4b20      	ldr	r3, [pc, #128]	@ (800052c <uar2_tx_init+0x88>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ac:	4a1f      	ldr	r2, [pc, #124]	@ (800052c <uar2_tx_init+0x88>)
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80004b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000530 <uar2_tx_init+0x8c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000530 <uar2_tx_init+0x8c>)
 80004ba:	f023 0310 	bic.w	r3, r3, #16
 80004be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000530 <uar2_tx_init+0x8c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000530 <uar2_tx_init+0x8c>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 80004cc:	4b18      	ldr	r3, [pc, #96]	@ (8000530 <uar2_tx_init+0x8c>)
 80004ce:	6a1b      	ldr	r3, [r3, #32]
 80004d0:	4a17      	ldr	r2, [pc, #92]	@ (8000530 <uar2_tx_init+0x8c>)
 80004d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80004d8:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <uar2_tx_init+0x8c>)
 80004da:	6a1b      	ldr	r3, [r3, #32]
 80004dc:	4a14      	ldr	r2, [pc, #80]	@ (8000530 <uar2_tx_init+0x8c>)
 80004de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80004e4:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <uar2_tx_init+0x8c>)
 80004e6:	6a1b      	ldr	r3, [r3, #32]
 80004e8:	4a11      	ldr	r2, [pc, #68]	@ (8000530 <uar2_tx_init+0x8c>)
 80004ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <uar2_tx_init+0x8c>)
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <uar2_tx_init+0x8c>)
 80004f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80004fa:	6213      	str	r3, [r2, #32]


	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	@ (800052c <uar2_tx_init+0x88>)
 80004fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000500:	4a0a      	ldr	r2, [pc, #40]	@ (800052c <uar2_tx_init+0x88>)
 8000502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000506:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000508:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800050c:	4909      	ldr	r1, [pc, #36]	@ (8000534 <uar2_tx_init+0x90>)
 800050e:	480a      	ldr	r0, [pc, #40]	@ (8000538 <uar2_tx_init+0x94>)
 8000510:	f000 f82c 	bl	800056c <uart_set_baudrate>

	/*Configure the transfer direction*/
	 USART2->CR1 =  CR1_TE;
 8000514:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <uar2_tx_init+0x94>)
 8000516:	2208      	movs	r2, #8
 8000518:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <uar2_tx_init+0x94>)
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	4a06      	ldr	r2, [pc, #24]	@ (8000538 <uar2_tx_init+0x94>)
 8000520:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000524:	60d3      	str	r3, [r2, #12]


}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800
 8000530:	40020000 	.word	0x40020000
 8000534:	00f42400 	.word	0x00f42400
 8000538:	40004400 	.word	0x40004400

0800053c <uart2_write>:


void uart2_write(int ch)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  /*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000544:	bf00      	nop
 8000546:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <uart2_write+0x2c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f9      	beq.n	8000546 <uart2_write+0xa>

  /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a04      	ldr	r2, [pc, #16]	@ (8000568 <uart2_write+0x2c>)
 8000556:	b2db      	uxtb	r3, r3
 8000558:	6053      	str	r3, [r2, #4]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40004400 	.word	0x40004400

0800056c <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000578:	6879      	ldr	r1, [r7, #4]
 800057a:	68b8      	ldr	r0, [r7, #8]
 800057c:	f000 f808 	bl	8000590 <compute_uart_bd>
 8000580:	4603      	mov	r3, r0
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	609a      	str	r2, [r3, #8]
}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	085a      	lsrs	r2, r3, #1
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	441a      	add	r2, r3
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a8:	b29b      	uxth	r3, r3
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80005bc:	f7ff ff54 	bl	8000468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005c2:	490d      	ldr	r1, [pc, #52]	@ (80005f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005c4:	4a0d      	ldr	r2, [pc, #52]	@ (80005fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000600 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000604 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80005e6:	f000 f991 	bl	800090c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ea:	f7ff fe61 	bl	80002b0 <main>
  bx  lr    
 80005ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80005fc:	08001504 	.word	0x08001504
  ldr r2, =_sbss
 8000600:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000604:	200001d0 	.word	0x200001d0

08000608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC_IRQHandler>
	...

0800060c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <HAL_IncTick+0x20>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <HAL_IncTick+0x24>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4413      	add	r3, r2
 800061c:	4a04      	ldr	r2, [pc, #16]	@ (8000630 <HAL_IncTick+0x24>)
 800061e:	6013      	str	r3, [r2, #0]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000000 	.word	0x20000000
 8000630:	20000080 	.word	0x20000080

08000634 <std>:
 8000634:	2300      	movs	r3, #0
 8000636:	b510      	push	{r4, lr}
 8000638:	4604      	mov	r4, r0
 800063a:	e9c0 3300 	strd	r3, r3, [r0]
 800063e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000642:	6083      	str	r3, [r0, #8]
 8000644:	8181      	strh	r1, [r0, #12]
 8000646:	6643      	str	r3, [r0, #100]	@ 0x64
 8000648:	81c2      	strh	r2, [r0, #14]
 800064a:	6183      	str	r3, [r0, #24]
 800064c:	4619      	mov	r1, r3
 800064e:	2208      	movs	r2, #8
 8000650:	305c      	adds	r0, #92	@ 0x5c
 8000652:	f000 f906 	bl	8000862 <memset>
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <std+0x58>)
 8000658:	6263      	str	r3, [r4, #36]	@ 0x24
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <std+0x5c>)
 800065c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <std+0x60>)
 8000660:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <std+0x64>)
 8000664:	6323      	str	r3, [r4, #48]	@ 0x30
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <std+0x68>)
 8000668:	6224      	str	r4, [r4, #32]
 800066a:	429c      	cmp	r4, r3
 800066c:	d006      	beq.n	800067c <std+0x48>
 800066e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000672:	4294      	cmp	r4, r2
 8000674:	d002      	beq.n	800067c <std+0x48>
 8000676:	33d0      	adds	r3, #208	@ 0xd0
 8000678:	429c      	cmp	r4, r3
 800067a:	d105      	bne.n	8000688 <std+0x54>
 800067c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000684:	f000 b966 	b.w	8000954 <__retarget_lock_init_recursive>
 8000688:	bd10      	pop	{r4, pc}
 800068a:	bf00      	nop
 800068c:	080007dd 	.word	0x080007dd
 8000690:	080007ff 	.word	0x080007ff
 8000694:	08000837 	.word	0x08000837
 8000698:	0800085b 	.word	0x0800085b
 800069c:	20000084 	.word	0x20000084

080006a0 <stdio_exit_handler>:
 80006a0:	4a02      	ldr	r2, [pc, #8]	@ (80006ac <stdio_exit_handler+0xc>)
 80006a2:	4903      	ldr	r1, [pc, #12]	@ (80006b0 <stdio_exit_handler+0x10>)
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <stdio_exit_handler+0x14>)
 80006a6:	f000 b869 	b.w	800077c <_fwalk_sglue>
 80006aa:	bf00      	nop
 80006ac:	20000004 	.word	0x20000004
 80006b0:	080011f1 	.word	0x080011f1
 80006b4:	20000014 	.word	0x20000014

080006b8 <cleanup_stdio>:
 80006b8:	6841      	ldr	r1, [r0, #4]
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <cleanup_stdio+0x34>)
 80006bc:	4299      	cmp	r1, r3
 80006be:	b510      	push	{r4, lr}
 80006c0:	4604      	mov	r4, r0
 80006c2:	d001      	beq.n	80006c8 <cleanup_stdio+0x10>
 80006c4:	f000 fd94 	bl	80011f0 <_fflush_r>
 80006c8:	68a1      	ldr	r1, [r4, #8]
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <cleanup_stdio+0x38>)
 80006cc:	4299      	cmp	r1, r3
 80006ce:	d002      	beq.n	80006d6 <cleanup_stdio+0x1e>
 80006d0:	4620      	mov	r0, r4
 80006d2:	f000 fd8d 	bl	80011f0 <_fflush_r>
 80006d6:	68e1      	ldr	r1, [r4, #12]
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <cleanup_stdio+0x3c>)
 80006da:	4299      	cmp	r1, r3
 80006dc:	d004      	beq.n	80006e8 <cleanup_stdio+0x30>
 80006de:	4620      	mov	r0, r4
 80006e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e4:	f000 bd84 	b.w	80011f0 <_fflush_r>
 80006e8:	bd10      	pop	{r4, pc}
 80006ea:	bf00      	nop
 80006ec:	20000084 	.word	0x20000084
 80006f0:	200000ec 	.word	0x200000ec
 80006f4:	20000154 	.word	0x20000154

080006f8 <global_stdio_init.part.0>:
 80006f8:	b510      	push	{r4, lr}
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <global_stdio_init.part.0+0x30>)
 80006fc:	4c0b      	ldr	r4, [pc, #44]	@ (800072c <global_stdio_init.part.0+0x34>)
 80006fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000730 <global_stdio_init.part.0+0x38>)
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	4620      	mov	r0, r4
 8000704:	2200      	movs	r2, #0
 8000706:	2104      	movs	r1, #4
 8000708:	f7ff ff94 	bl	8000634 <std>
 800070c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000710:	2201      	movs	r2, #1
 8000712:	2109      	movs	r1, #9
 8000714:	f7ff ff8e 	bl	8000634 <std>
 8000718:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800071c:	2202      	movs	r2, #2
 800071e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000722:	2112      	movs	r1, #18
 8000724:	f7ff bf86 	b.w	8000634 <std>
 8000728:	200001bc 	.word	0x200001bc
 800072c:	20000084 	.word	0x20000084
 8000730:	080006a1 	.word	0x080006a1

08000734 <__sfp_lock_acquire>:
 8000734:	4801      	ldr	r0, [pc, #4]	@ (800073c <__sfp_lock_acquire+0x8>)
 8000736:	f000 b90e 	b.w	8000956 <__retarget_lock_acquire_recursive>
 800073a:	bf00      	nop
 800073c:	200001c5 	.word	0x200001c5

08000740 <__sfp_lock_release>:
 8000740:	4801      	ldr	r0, [pc, #4]	@ (8000748 <__sfp_lock_release+0x8>)
 8000742:	f000 b909 	b.w	8000958 <__retarget_lock_release_recursive>
 8000746:	bf00      	nop
 8000748:	200001c5 	.word	0x200001c5

0800074c <__sinit>:
 800074c:	b510      	push	{r4, lr}
 800074e:	4604      	mov	r4, r0
 8000750:	f7ff fff0 	bl	8000734 <__sfp_lock_acquire>
 8000754:	6a23      	ldr	r3, [r4, #32]
 8000756:	b11b      	cbz	r3, 8000760 <__sinit+0x14>
 8000758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800075c:	f7ff bff0 	b.w	8000740 <__sfp_lock_release>
 8000760:	4b04      	ldr	r3, [pc, #16]	@ (8000774 <__sinit+0x28>)
 8000762:	6223      	str	r3, [r4, #32]
 8000764:	4b04      	ldr	r3, [pc, #16]	@ (8000778 <__sinit+0x2c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1f5      	bne.n	8000758 <__sinit+0xc>
 800076c:	f7ff ffc4 	bl	80006f8 <global_stdio_init.part.0>
 8000770:	e7f2      	b.n	8000758 <__sinit+0xc>
 8000772:	bf00      	nop
 8000774:	080006b9 	.word	0x080006b9
 8000778:	200001bc 	.word	0x200001bc

0800077c <_fwalk_sglue>:
 800077c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000780:	4607      	mov	r7, r0
 8000782:	4688      	mov	r8, r1
 8000784:	4614      	mov	r4, r2
 8000786:	2600      	movs	r6, #0
 8000788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800078c:	f1b9 0901 	subs.w	r9, r9, #1
 8000790:	d505      	bpl.n	800079e <_fwalk_sglue+0x22>
 8000792:	6824      	ldr	r4, [r4, #0]
 8000794:	2c00      	cmp	r4, #0
 8000796:	d1f7      	bne.n	8000788 <_fwalk_sglue+0xc>
 8000798:	4630      	mov	r0, r6
 800079a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800079e:	89ab      	ldrh	r3, [r5, #12]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d907      	bls.n	80007b4 <_fwalk_sglue+0x38>
 80007a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007a8:	3301      	adds	r3, #1
 80007aa:	d003      	beq.n	80007b4 <_fwalk_sglue+0x38>
 80007ac:	4629      	mov	r1, r5
 80007ae:	4638      	mov	r0, r7
 80007b0:	47c0      	blx	r8
 80007b2:	4306      	orrs	r6, r0
 80007b4:	3568      	adds	r5, #104	@ 0x68
 80007b6:	e7e9      	b.n	800078c <_fwalk_sglue+0x10>

080007b8 <iprintf>:
 80007b8:	b40f      	push	{r0, r1, r2, r3}
 80007ba:	b507      	push	{r0, r1, r2, lr}
 80007bc:	4906      	ldr	r1, [pc, #24]	@ (80007d8 <iprintf+0x20>)
 80007be:	ab04      	add	r3, sp, #16
 80007c0:	6808      	ldr	r0, [r1, #0]
 80007c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80007c6:	6881      	ldr	r1, [r0, #8]
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	f000 f9e9 	bl	8000ba0 <_vfiprintf_r>
 80007ce:	b003      	add	sp, #12
 80007d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr
 80007d8:	20000010 	.word	0x20000010

080007dc <__sread>:
 80007dc:	b510      	push	{r4, lr}
 80007de:	460c      	mov	r4, r1
 80007e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007e4:	f000 f868 	bl	80008b8 <_read_r>
 80007e8:	2800      	cmp	r0, #0
 80007ea:	bfab      	itete	ge
 80007ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80007ee:	89a3      	ldrhlt	r3, [r4, #12]
 80007f0:	181b      	addge	r3, r3, r0
 80007f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80007f6:	bfac      	ite	ge
 80007f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80007fa:	81a3      	strhlt	r3, [r4, #12]
 80007fc:	bd10      	pop	{r4, pc}

080007fe <__swrite>:
 80007fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000802:	461f      	mov	r7, r3
 8000804:	898b      	ldrh	r3, [r1, #12]
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	4605      	mov	r5, r0
 800080a:	460c      	mov	r4, r1
 800080c:	4616      	mov	r6, r2
 800080e:	d505      	bpl.n	800081c <__swrite+0x1e>
 8000810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000814:	2302      	movs	r3, #2
 8000816:	2200      	movs	r2, #0
 8000818:	f000 f83c 	bl	8000894 <_lseek_r>
 800081c:	89a3      	ldrh	r3, [r4, #12]
 800081e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000822:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000826:	81a3      	strh	r3, [r4, #12]
 8000828:	4632      	mov	r2, r6
 800082a:	463b      	mov	r3, r7
 800082c:	4628      	mov	r0, r5
 800082e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000832:	f000 b853 	b.w	80008dc <_write_r>

08000836 <__sseek>:
 8000836:	b510      	push	{r4, lr}
 8000838:	460c      	mov	r4, r1
 800083a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800083e:	f000 f829 	bl	8000894 <_lseek_r>
 8000842:	1c43      	adds	r3, r0, #1
 8000844:	89a3      	ldrh	r3, [r4, #12]
 8000846:	bf15      	itete	ne
 8000848:	6560      	strne	r0, [r4, #84]	@ 0x54
 800084a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800084e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000852:	81a3      	strheq	r3, [r4, #12]
 8000854:	bf18      	it	ne
 8000856:	81a3      	strhne	r3, [r4, #12]
 8000858:	bd10      	pop	{r4, pc}

0800085a <__sclose>:
 800085a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800085e:	f000 b809 	b.w	8000874 <_close_r>

08000862 <memset>:
 8000862:	4402      	add	r2, r0
 8000864:	4603      	mov	r3, r0
 8000866:	4293      	cmp	r3, r2
 8000868:	d100      	bne.n	800086c <memset+0xa>
 800086a:	4770      	bx	lr
 800086c:	f803 1b01 	strb.w	r1, [r3], #1
 8000870:	e7f9      	b.n	8000866 <memset+0x4>
	...

08000874 <_close_r>:
 8000874:	b538      	push	{r3, r4, r5, lr}
 8000876:	4d06      	ldr	r5, [pc, #24]	@ (8000890 <_close_r+0x1c>)
 8000878:	2300      	movs	r3, #0
 800087a:	4604      	mov	r4, r0
 800087c:	4608      	mov	r0, r1
 800087e:	602b      	str	r3, [r5, #0]
 8000880:	f7ff fd88 	bl	8000394 <_close>
 8000884:	1c43      	adds	r3, r0, #1
 8000886:	d102      	bne.n	800088e <_close_r+0x1a>
 8000888:	682b      	ldr	r3, [r5, #0]
 800088a:	b103      	cbz	r3, 800088e <_close_r+0x1a>
 800088c:	6023      	str	r3, [r4, #0]
 800088e:	bd38      	pop	{r3, r4, r5, pc}
 8000890:	200001c0 	.word	0x200001c0

08000894 <_lseek_r>:
 8000894:	b538      	push	{r3, r4, r5, lr}
 8000896:	4d07      	ldr	r5, [pc, #28]	@ (80008b4 <_lseek_r+0x20>)
 8000898:	4604      	mov	r4, r0
 800089a:	4608      	mov	r0, r1
 800089c:	4611      	mov	r1, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	602a      	str	r2, [r5, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	f7ff fd9d 	bl	80003e2 <_lseek>
 80008a8:	1c43      	adds	r3, r0, #1
 80008aa:	d102      	bne.n	80008b2 <_lseek_r+0x1e>
 80008ac:	682b      	ldr	r3, [r5, #0]
 80008ae:	b103      	cbz	r3, 80008b2 <_lseek_r+0x1e>
 80008b0:	6023      	str	r3, [r4, #0]
 80008b2:	bd38      	pop	{r3, r4, r5, pc}
 80008b4:	200001c0 	.word	0x200001c0

080008b8 <_read_r>:
 80008b8:	b538      	push	{r3, r4, r5, lr}
 80008ba:	4d07      	ldr	r5, [pc, #28]	@ (80008d8 <_read_r+0x20>)
 80008bc:	4604      	mov	r4, r0
 80008be:	4608      	mov	r0, r1
 80008c0:	4611      	mov	r1, r2
 80008c2:	2200      	movs	r2, #0
 80008c4:	602a      	str	r2, [r5, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	f7ff fd2b 	bl	8000322 <_read>
 80008cc:	1c43      	adds	r3, r0, #1
 80008ce:	d102      	bne.n	80008d6 <_read_r+0x1e>
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	b103      	cbz	r3, 80008d6 <_read_r+0x1e>
 80008d4:	6023      	str	r3, [r4, #0]
 80008d6:	bd38      	pop	{r3, r4, r5, pc}
 80008d8:	200001c0 	.word	0x200001c0

080008dc <_write_r>:
 80008dc:	b538      	push	{r3, r4, r5, lr}
 80008de:	4d07      	ldr	r5, [pc, #28]	@ (80008fc <_write_r+0x20>)
 80008e0:	4604      	mov	r4, r0
 80008e2:	4608      	mov	r0, r1
 80008e4:	4611      	mov	r1, r2
 80008e6:	2200      	movs	r2, #0
 80008e8:	602a      	str	r2, [r5, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	f7ff fd36 	bl	800035c <_write>
 80008f0:	1c43      	adds	r3, r0, #1
 80008f2:	d102      	bne.n	80008fa <_write_r+0x1e>
 80008f4:	682b      	ldr	r3, [r5, #0]
 80008f6:	b103      	cbz	r3, 80008fa <_write_r+0x1e>
 80008f8:	6023      	str	r3, [r4, #0]
 80008fa:	bd38      	pop	{r3, r4, r5, pc}
 80008fc:	200001c0 	.word	0x200001c0

08000900 <__errno>:
 8000900:	4b01      	ldr	r3, [pc, #4]	@ (8000908 <__errno+0x8>)
 8000902:	6818      	ldr	r0, [r3, #0]
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000010 	.word	0x20000010

0800090c <__libc_init_array>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	4d0d      	ldr	r5, [pc, #52]	@ (8000944 <__libc_init_array+0x38>)
 8000910:	4c0d      	ldr	r4, [pc, #52]	@ (8000948 <__libc_init_array+0x3c>)
 8000912:	1b64      	subs	r4, r4, r5
 8000914:	10a4      	asrs	r4, r4, #2
 8000916:	2600      	movs	r6, #0
 8000918:	42a6      	cmp	r6, r4
 800091a:	d109      	bne.n	8000930 <__libc_init_array+0x24>
 800091c:	4d0b      	ldr	r5, [pc, #44]	@ (800094c <__libc_init_array+0x40>)
 800091e:	4c0c      	ldr	r4, [pc, #48]	@ (8000950 <__libc_init_array+0x44>)
 8000920:	f000 fdb6 	bl	8001490 <_init>
 8000924:	1b64      	subs	r4, r4, r5
 8000926:	10a4      	asrs	r4, r4, #2
 8000928:	2600      	movs	r6, #0
 800092a:	42a6      	cmp	r6, r4
 800092c:	d105      	bne.n	800093a <__libc_init_array+0x2e>
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f855 3b04 	ldr.w	r3, [r5], #4
 8000934:	4798      	blx	r3
 8000936:	3601      	adds	r6, #1
 8000938:	e7ee      	b.n	8000918 <__libc_init_array+0xc>
 800093a:	f855 3b04 	ldr.w	r3, [r5], #4
 800093e:	4798      	blx	r3
 8000940:	3601      	adds	r6, #1
 8000942:	e7f2      	b.n	800092a <__libc_init_array+0x1e>
 8000944:	080014fc 	.word	0x080014fc
 8000948:	080014fc 	.word	0x080014fc
 800094c:	080014fc 	.word	0x080014fc
 8000950:	08001500 	.word	0x08001500

08000954 <__retarget_lock_init_recursive>:
 8000954:	4770      	bx	lr

08000956 <__retarget_lock_acquire_recursive>:
 8000956:	4770      	bx	lr

08000958 <__retarget_lock_release_recursive>:
 8000958:	4770      	bx	lr
	...

0800095c <_free_r>:
 800095c:	b538      	push	{r3, r4, r5, lr}
 800095e:	4605      	mov	r5, r0
 8000960:	2900      	cmp	r1, #0
 8000962:	d041      	beq.n	80009e8 <_free_r+0x8c>
 8000964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000968:	1f0c      	subs	r4, r1, #4
 800096a:	2b00      	cmp	r3, #0
 800096c:	bfb8      	it	lt
 800096e:	18e4      	addlt	r4, r4, r3
 8000970:	f000 f8e0 	bl	8000b34 <__malloc_lock>
 8000974:	4a1d      	ldr	r2, [pc, #116]	@ (80009ec <_free_r+0x90>)
 8000976:	6813      	ldr	r3, [r2, #0]
 8000978:	b933      	cbnz	r3, 8000988 <_free_r+0x2c>
 800097a:	6063      	str	r3, [r4, #4]
 800097c:	6014      	str	r4, [r2, #0]
 800097e:	4628      	mov	r0, r5
 8000980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000984:	f000 b8dc 	b.w	8000b40 <__malloc_unlock>
 8000988:	42a3      	cmp	r3, r4
 800098a:	d908      	bls.n	800099e <_free_r+0x42>
 800098c:	6820      	ldr	r0, [r4, #0]
 800098e:	1821      	adds	r1, r4, r0
 8000990:	428b      	cmp	r3, r1
 8000992:	bf01      	itttt	eq
 8000994:	6819      	ldreq	r1, [r3, #0]
 8000996:	685b      	ldreq	r3, [r3, #4]
 8000998:	1809      	addeq	r1, r1, r0
 800099a:	6021      	streq	r1, [r4, #0]
 800099c:	e7ed      	b.n	800097a <_free_r+0x1e>
 800099e:	461a      	mov	r2, r3
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	b10b      	cbz	r3, 80009a8 <_free_r+0x4c>
 80009a4:	42a3      	cmp	r3, r4
 80009a6:	d9fa      	bls.n	800099e <_free_r+0x42>
 80009a8:	6811      	ldr	r1, [r2, #0]
 80009aa:	1850      	adds	r0, r2, r1
 80009ac:	42a0      	cmp	r0, r4
 80009ae:	d10b      	bne.n	80009c8 <_free_r+0x6c>
 80009b0:	6820      	ldr	r0, [r4, #0]
 80009b2:	4401      	add	r1, r0
 80009b4:	1850      	adds	r0, r2, r1
 80009b6:	4283      	cmp	r3, r0
 80009b8:	6011      	str	r1, [r2, #0]
 80009ba:	d1e0      	bne.n	800097e <_free_r+0x22>
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	6053      	str	r3, [r2, #4]
 80009c2:	4408      	add	r0, r1
 80009c4:	6010      	str	r0, [r2, #0]
 80009c6:	e7da      	b.n	800097e <_free_r+0x22>
 80009c8:	d902      	bls.n	80009d0 <_free_r+0x74>
 80009ca:	230c      	movs	r3, #12
 80009cc:	602b      	str	r3, [r5, #0]
 80009ce:	e7d6      	b.n	800097e <_free_r+0x22>
 80009d0:	6820      	ldr	r0, [r4, #0]
 80009d2:	1821      	adds	r1, r4, r0
 80009d4:	428b      	cmp	r3, r1
 80009d6:	bf04      	itt	eq
 80009d8:	6819      	ldreq	r1, [r3, #0]
 80009da:	685b      	ldreq	r3, [r3, #4]
 80009dc:	6063      	str	r3, [r4, #4]
 80009de:	bf04      	itt	eq
 80009e0:	1809      	addeq	r1, r1, r0
 80009e2:	6021      	streq	r1, [r4, #0]
 80009e4:	6054      	str	r4, [r2, #4]
 80009e6:	e7ca      	b.n	800097e <_free_r+0x22>
 80009e8:	bd38      	pop	{r3, r4, r5, pc}
 80009ea:	bf00      	nop
 80009ec:	200001cc 	.word	0x200001cc

080009f0 <sbrk_aligned>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	4e0f      	ldr	r6, [pc, #60]	@ (8000a30 <sbrk_aligned+0x40>)
 80009f4:	460c      	mov	r4, r1
 80009f6:	6831      	ldr	r1, [r6, #0]
 80009f8:	4605      	mov	r5, r0
 80009fa:	b911      	cbnz	r1, 8000a02 <sbrk_aligned+0x12>
 80009fc:	f000 fcb4 	bl	8001368 <_sbrk_r>
 8000a00:	6030      	str	r0, [r6, #0]
 8000a02:	4621      	mov	r1, r4
 8000a04:	4628      	mov	r0, r5
 8000a06:	f000 fcaf 	bl	8001368 <_sbrk_r>
 8000a0a:	1c43      	adds	r3, r0, #1
 8000a0c:	d103      	bne.n	8000a16 <sbrk_aligned+0x26>
 8000a0e:	f04f 34ff 	mov.w	r4, #4294967295
 8000a12:	4620      	mov	r0, r4
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	1cc4      	adds	r4, r0, #3
 8000a18:	f024 0403 	bic.w	r4, r4, #3
 8000a1c:	42a0      	cmp	r0, r4
 8000a1e:	d0f8      	beq.n	8000a12 <sbrk_aligned+0x22>
 8000a20:	1a21      	subs	r1, r4, r0
 8000a22:	4628      	mov	r0, r5
 8000a24:	f000 fca0 	bl	8001368 <_sbrk_r>
 8000a28:	3001      	adds	r0, #1
 8000a2a:	d1f2      	bne.n	8000a12 <sbrk_aligned+0x22>
 8000a2c:	e7ef      	b.n	8000a0e <sbrk_aligned+0x1e>
 8000a2e:	bf00      	nop
 8000a30:	200001c8 	.word	0x200001c8

08000a34 <_malloc_r>:
 8000a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a38:	1ccd      	adds	r5, r1, #3
 8000a3a:	f025 0503 	bic.w	r5, r5, #3
 8000a3e:	3508      	adds	r5, #8
 8000a40:	2d0c      	cmp	r5, #12
 8000a42:	bf38      	it	cc
 8000a44:	250c      	movcc	r5, #12
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	4606      	mov	r6, r0
 8000a4a:	db01      	blt.n	8000a50 <_malloc_r+0x1c>
 8000a4c:	42a9      	cmp	r1, r5
 8000a4e:	d904      	bls.n	8000a5a <_malloc_r+0x26>
 8000a50:	230c      	movs	r3, #12
 8000a52:	6033      	str	r3, [r6, #0]
 8000a54:	2000      	movs	r0, #0
 8000a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b30 <_malloc_r+0xfc>
 8000a5e:	f000 f869 	bl	8000b34 <__malloc_lock>
 8000a62:	f8d8 3000 	ldr.w	r3, [r8]
 8000a66:	461c      	mov	r4, r3
 8000a68:	bb44      	cbnz	r4, 8000abc <_malloc_r+0x88>
 8000a6a:	4629      	mov	r1, r5
 8000a6c:	4630      	mov	r0, r6
 8000a6e:	f7ff ffbf 	bl	80009f0 <sbrk_aligned>
 8000a72:	1c43      	adds	r3, r0, #1
 8000a74:	4604      	mov	r4, r0
 8000a76:	d158      	bne.n	8000b2a <_malloc_r+0xf6>
 8000a78:	f8d8 4000 	ldr.w	r4, [r8]
 8000a7c:	4627      	mov	r7, r4
 8000a7e:	2f00      	cmp	r7, #0
 8000a80:	d143      	bne.n	8000b0a <_malloc_r+0xd6>
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d04b      	beq.n	8000b1e <_malloc_r+0xea>
 8000a86:	6823      	ldr	r3, [r4, #0]
 8000a88:	4639      	mov	r1, r7
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	eb04 0903 	add.w	r9, r4, r3
 8000a90:	f000 fc6a 	bl	8001368 <_sbrk_r>
 8000a94:	4581      	cmp	r9, r0
 8000a96:	d142      	bne.n	8000b1e <_malloc_r+0xea>
 8000a98:	6821      	ldr	r1, [r4, #0]
 8000a9a:	1a6d      	subs	r5, r5, r1
 8000a9c:	4629      	mov	r1, r5
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	f7ff ffa6 	bl	80009f0 <sbrk_aligned>
 8000aa4:	3001      	adds	r0, #1
 8000aa6:	d03a      	beq.n	8000b1e <_malloc_r+0xea>
 8000aa8:	6823      	ldr	r3, [r4, #0]
 8000aaa:	442b      	add	r3, r5
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	f8d8 3000 	ldr.w	r3, [r8]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	bb62      	cbnz	r2, 8000b10 <_malloc_r+0xdc>
 8000ab6:	f8c8 7000 	str.w	r7, [r8]
 8000aba:	e00f      	b.n	8000adc <_malloc_r+0xa8>
 8000abc:	6822      	ldr	r2, [r4, #0]
 8000abe:	1b52      	subs	r2, r2, r5
 8000ac0:	d420      	bmi.n	8000b04 <_malloc_r+0xd0>
 8000ac2:	2a0b      	cmp	r2, #11
 8000ac4:	d917      	bls.n	8000af6 <_malloc_r+0xc2>
 8000ac6:	1961      	adds	r1, r4, r5
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	6025      	str	r5, [r4, #0]
 8000acc:	bf18      	it	ne
 8000ace:	6059      	strne	r1, [r3, #4]
 8000ad0:	6863      	ldr	r3, [r4, #4]
 8000ad2:	bf08      	it	eq
 8000ad4:	f8c8 1000 	streq.w	r1, [r8]
 8000ad8:	5162      	str	r2, [r4, r5]
 8000ada:	604b      	str	r3, [r1, #4]
 8000adc:	4630      	mov	r0, r6
 8000ade:	f000 f82f 	bl	8000b40 <__malloc_unlock>
 8000ae2:	f104 000b 	add.w	r0, r4, #11
 8000ae6:	1d23      	adds	r3, r4, #4
 8000ae8:	f020 0007 	bic.w	r0, r0, #7
 8000aec:	1ac2      	subs	r2, r0, r3
 8000aee:	bf1c      	itt	ne
 8000af0:	1a1b      	subne	r3, r3, r0
 8000af2:	50a3      	strne	r3, [r4, r2]
 8000af4:	e7af      	b.n	8000a56 <_malloc_r+0x22>
 8000af6:	6862      	ldr	r2, [r4, #4]
 8000af8:	42a3      	cmp	r3, r4
 8000afa:	bf0c      	ite	eq
 8000afc:	f8c8 2000 	streq.w	r2, [r8]
 8000b00:	605a      	strne	r2, [r3, #4]
 8000b02:	e7eb      	b.n	8000adc <_malloc_r+0xa8>
 8000b04:	4623      	mov	r3, r4
 8000b06:	6864      	ldr	r4, [r4, #4]
 8000b08:	e7ae      	b.n	8000a68 <_malloc_r+0x34>
 8000b0a:	463c      	mov	r4, r7
 8000b0c:	687f      	ldr	r7, [r7, #4]
 8000b0e:	e7b6      	b.n	8000a7e <_malloc_r+0x4a>
 8000b10:	461a      	mov	r2, r3
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	42a3      	cmp	r3, r4
 8000b16:	d1fb      	bne.n	8000b10 <_malloc_r+0xdc>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	6053      	str	r3, [r2, #4]
 8000b1c:	e7de      	b.n	8000adc <_malloc_r+0xa8>
 8000b1e:	230c      	movs	r3, #12
 8000b20:	6033      	str	r3, [r6, #0]
 8000b22:	4630      	mov	r0, r6
 8000b24:	f000 f80c 	bl	8000b40 <__malloc_unlock>
 8000b28:	e794      	b.n	8000a54 <_malloc_r+0x20>
 8000b2a:	6005      	str	r5, [r0, #0]
 8000b2c:	e7d6      	b.n	8000adc <_malloc_r+0xa8>
 8000b2e:	bf00      	nop
 8000b30:	200001cc 	.word	0x200001cc

08000b34 <__malloc_lock>:
 8000b34:	4801      	ldr	r0, [pc, #4]	@ (8000b3c <__malloc_lock+0x8>)
 8000b36:	f7ff bf0e 	b.w	8000956 <__retarget_lock_acquire_recursive>
 8000b3a:	bf00      	nop
 8000b3c:	200001c4 	.word	0x200001c4

08000b40 <__malloc_unlock>:
 8000b40:	4801      	ldr	r0, [pc, #4]	@ (8000b48 <__malloc_unlock+0x8>)
 8000b42:	f7ff bf09 	b.w	8000958 <__retarget_lock_release_recursive>
 8000b46:	bf00      	nop
 8000b48:	200001c4 	.word	0x200001c4

08000b4c <__sfputc_r>:
 8000b4c:	6893      	ldr	r3, [r2, #8]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	b410      	push	{r4}
 8000b54:	6093      	str	r3, [r2, #8]
 8000b56:	da08      	bge.n	8000b6a <__sfputc_r+0x1e>
 8000b58:	6994      	ldr	r4, [r2, #24]
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	db01      	blt.n	8000b62 <__sfputc_r+0x16>
 8000b5e:	290a      	cmp	r1, #10
 8000b60:	d103      	bne.n	8000b6a <__sfputc_r+0x1e>
 8000b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b66:	f000 bb6b 	b.w	8001240 <__swbuf_r>
 8000b6a:	6813      	ldr	r3, [r2, #0]
 8000b6c:	1c58      	adds	r0, r3, #1
 8000b6e:	6010      	str	r0, [r2, #0]
 8000b70:	7019      	strb	r1, [r3, #0]
 8000b72:	4608      	mov	r0, r1
 8000b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <__sfputs_r>:
 8000b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7c:	4606      	mov	r6, r0
 8000b7e:	460f      	mov	r7, r1
 8000b80:	4614      	mov	r4, r2
 8000b82:	18d5      	adds	r5, r2, r3
 8000b84:	42ac      	cmp	r4, r5
 8000b86:	d101      	bne.n	8000b8c <__sfputs_r+0x12>
 8000b88:	2000      	movs	r0, #0
 8000b8a:	e007      	b.n	8000b9c <__sfputs_r+0x22>
 8000b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b90:	463a      	mov	r2, r7
 8000b92:	4630      	mov	r0, r6
 8000b94:	f7ff ffda 	bl	8000b4c <__sfputc_r>
 8000b98:	1c43      	adds	r3, r0, #1
 8000b9a:	d1f3      	bne.n	8000b84 <__sfputs_r+0xa>
 8000b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ba0 <_vfiprintf_r>:
 8000ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	b09d      	sub	sp, #116	@ 0x74
 8000ba8:	4614      	mov	r4, r2
 8000baa:	4698      	mov	r8, r3
 8000bac:	4606      	mov	r6, r0
 8000bae:	b118      	cbz	r0, 8000bb8 <_vfiprintf_r+0x18>
 8000bb0:	6a03      	ldr	r3, [r0, #32]
 8000bb2:	b90b      	cbnz	r3, 8000bb8 <_vfiprintf_r+0x18>
 8000bb4:	f7ff fdca 	bl	800074c <__sinit>
 8000bb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000bba:	07d9      	lsls	r1, r3, #31
 8000bbc:	d405      	bmi.n	8000bca <_vfiprintf_r+0x2a>
 8000bbe:	89ab      	ldrh	r3, [r5, #12]
 8000bc0:	059a      	lsls	r2, r3, #22
 8000bc2:	d402      	bmi.n	8000bca <_vfiprintf_r+0x2a>
 8000bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000bc6:	f7ff fec6 	bl	8000956 <__retarget_lock_acquire_recursive>
 8000bca:	89ab      	ldrh	r3, [r5, #12]
 8000bcc:	071b      	lsls	r3, r3, #28
 8000bce:	d501      	bpl.n	8000bd4 <_vfiprintf_r+0x34>
 8000bd0:	692b      	ldr	r3, [r5, #16]
 8000bd2:	b99b      	cbnz	r3, 8000bfc <_vfiprintf_r+0x5c>
 8000bd4:	4629      	mov	r1, r5
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	f000 fb70 	bl	80012bc <__swsetup_r>
 8000bdc:	b170      	cbz	r0, 8000bfc <_vfiprintf_r+0x5c>
 8000bde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000be0:	07dc      	lsls	r4, r3, #31
 8000be2:	d504      	bpl.n	8000bee <_vfiprintf_r+0x4e>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	b01d      	add	sp, #116	@ 0x74
 8000bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bee:	89ab      	ldrh	r3, [r5, #12]
 8000bf0:	0598      	lsls	r0, r3, #22
 8000bf2:	d4f7      	bmi.n	8000be4 <_vfiprintf_r+0x44>
 8000bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000bf6:	f7ff feaf 	bl	8000958 <__retarget_lock_release_recursive>
 8000bfa:	e7f3      	b.n	8000be4 <_vfiprintf_r+0x44>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c00:	2320      	movs	r3, #32
 8000c02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c0a:	2330      	movs	r3, #48	@ 0x30
 8000c0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000dbc <_vfiprintf_r+0x21c>
 8000c10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c14:	f04f 0901 	mov.w	r9, #1
 8000c18:	4623      	mov	r3, r4
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c20:	b10a      	cbz	r2, 8000c26 <_vfiprintf_r+0x86>
 8000c22:	2a25      	cmp	r2, #37	@ 0x25
 8000c24:	d1f9      	bne.n	8000c1a <_vfiprintf_r+0x7a>
 8000c26:	ebba 0b04 	subs.w	fp, sl, r4
 8000c2a:	d00b      	beq.n	8000c44 <_vfiprintf_r+0xa4>
 8000c2c:	465b      	mov	r3, fp
 8000c2e:	4622      	mov	r2, r4
 8000c30:	4629      	mov	r1, r5
 8000c32:	4630      	mov	r0, r6
 8000c34:	f7ff ffa1 	bl	8000b7a <__sfputs_r>
 8000c38:	3001      	adds	r0, #1
 8000c3a:	f000 80a7 	beq.w	8000d8c <_vfiprintf_r+0x1ec>
 8000c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c40:	445a      	add	r2, fp
 8000c42:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c44:	f89a 3000 	ldrb.w	r3, [sl]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 809f 	beq.w	8000d8c <_vfiprintf_r+0x1ec>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c58:	f10a 0a01 	add.w	sl, sl, #1
 8000c5c:	9304      	str	r3, [sp, #16]
 8000c5e:	9307      	str	r3, [sp, #28]
 8000c60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c64:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c66:	4654      	mov	r4, sl
 8000c68:	2205      	movs	r2, #5
 8000c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c6e:	4853      	ldr	r0, [pc, #332]	@ (8000dbc <_vfiprintf_r+0x21c>)
 8000c70:	f7ff face 	bl	8000210 <memchr>
 8000c74:	9a04      	ldr	r2, [sp, #16]
 8000c76:	b9d8      	cbnz	r0, 8000cb0 <_vfiprintf_r+0x110>
 8000c78:	06d1      	lsls	r1, r2, #27
 8000c7a:	bf44      	itt	mi
 8000c7c:	2320      	movmi	r3, #32
 8000c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c82:	0713      	lsls	r3, r2, #28
 8000c84:	bf44      	itt	mi
 8000c86:	232b      	movmi	r3, #43	@ 0x2b
 8000c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c92:	d015      	beq.n	8000cc0 <_vfiprintf_r+0x120>
 8000c94:	9a07      	ldr	r2, [sp, #28]
 8000c96:	4654      	mov	r4, sl
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f04f 0c0a 	mov.w	ip, #10
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ca4:	3b30      	subs	r3, #48	@ 0x30
 8000ca6:	2b09      	cmp	r3, #9
 8000ca8:	d94b      	bls.n	8000d42 <_vfiprintf_r+0x1a2>
 8000caa:	b1b0      	cbz	r0, 8000cda <_vfiprintf_r+0x13a>
 8000cac:	9207      	str	r2, [sp, #28]
 8000cae:	e014      	b.n	8000cda <_vfiprintf_r+0x13a>
 8000cb0:	eba0 0308 	sub.w	r3, r0, r8
 8000cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	9304      	str	r3, [sp, #16]
 8000cbc:	46a2      	mov	sl, r4
 8000cbe:	e7d2      	b.n	8000c66 <_vfiprintf_r+0xc6>
 8000cc0:	9b03      	ldr	r3, [sp, #12]
 8000cc2:	1d19      	adds	r1, r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	9103      	str	r1, [sp, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bfbb      	ittet	lt
 8000ccc:	425b      	neglt	r3, r3
 8000cce:	f042 0202 	orrlt.w	r2, r2, #2
 8000cd2:	9307      	strge	r3, [sp, #28]
 8000cd4:	9307      	strlt	r3, [sp, #28]
 8000cd6:	bfb8      	it	lt
 8000cd8:	9204      	strlt	r2, [sp, #16]
 8000cda:	7823      	ldrb	r3, [r4, #0]
 8000cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cde:	d10a      	bne.n	8000cf6 <_vfiprintf_r+0x156>
 8000ce0:	7863      	ldrb	r3, [r4, #1]
 8000ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ce4:	d132      	bne.n	8000d4c <_vfiprintf_r+0x1ac>
 8000ce6:	9b03      	ldr	r3, [sp, #12]
 8000ce8:	1d1a      	adds	r2, r3, #4
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	9203      	str	r2, [sp, #12]
 8000cee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000cf2:	3402      	adds	r4, #2
 8000cf4:	9305      	str	r3, [sp, #20]
 8000cf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000dcc <_vfiprintf_r+0x22c>
 8000cfa:	7821      	ldrb	r1, [r4, #0]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4650      	mov	r0, sl
 8000d00:	f7ff fa86 	bl	8000210 <memchr>
 8000d04:	b138      	cbz	r0, 8000d16 <_vfiprintf_r+0x176>
 8000d06:	9b04      	ldr	r3, [sp, #16]
 8000d08:	eba0 000a 	sub.w	r0, r0, sl
 8000d0c:	2240      	movs	r2, #64	@ 0x40
 8000d0e:	4082      	lsls	r2, r0
 8000d10:	4313      	orrs	r3, r2
 8000d12:	3401      	adds	r4, #1
 8000d14:	9304      	str	r3, [sp, #16]
 8000d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d1a:	4829      	ldr	r0, [pc, #164]	@ (8000dc0 <_vfiprintf_r+0x220>)
 8000d1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d20:	2206      	movs	r2, #6
 8000d22:	f7ff fa75 	bl	8000210 <memchr>
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d03f      	beq.n	8000daa <_vfiprintf_r+0x20a>
 8000d2a:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <_vfiprintf_r+0x224>)
 8000d2c:	bb1b      	cbnz	r3, 8000d76 <_vfiprintf_r+0x1d6>
 8000d2e:	9b03      	ldr	r3, [sp, #12]
 8000d30:	3307      	adds	r3, #7
 8000d32:	f023 0307 	bic.w	r3, r3, #7
 8000d36:	3308      	adds	r3, #8
 8000d38:	9303      	str	r3, [sp, #12]
 8000d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d3c:	443b      	add	r3, r7
 8000d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d40:	e76a      	b.n	8000c18 <_vfiprintf_r+0x78>
 8000d42:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d46:	460c      	mov	r4, r1
 8000d48:	2001      	movs	r0, #1
 8000d4a:	e7a8      	b.n	8000c9e <_vfiprintf_r+0xfe>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	3401      	adds	r4, #1
 8000d50:	9305      	str	r3, [sp, #20]
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 0c0a 	mov.w	ip, #10
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d5e:	3a30      	subs	r2, #48	@ 0x30
 8000d60:	2a09      	cmp	r2, #9
 8000d62:	d903      	bls.n	8000d6c <_vfiprintf_r+0x1cc>
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0c6      	beq.n	8000cf6 <_vfiprintf_r+0x156>
 8000d68:	9105      	str	r1, [sp, #20]
 8000d6a:	e7c4      	b.n	8000cf6 <_vfiprintf_r+0x156>
 8000d6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d70:	4604      	mov	r4, r0
 8000d72:	2301      	movs	r3, #1
 8000d74:	e7f0      	b.n	8000d58 <_vfiprintf_r+0x1b8>
 8000d76:	ab03      	add	r3, sp, #12
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	462a      	mov	r2, r5
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <_vfiprintf_r+0x228>)
 8000d7e:	a904      	add	r1, sp, #16
 8000d80:	4630      	mov	r0, r6
 8000d82:	f3af 8000 	nop.w
 8000d86:	4607      	mov	r7, r0
 8000d88:	1c78      	adds	r0, r7, #1
 8000d8a:	d1d6      	bne.n	8000d3a <_vfiprintf_r+0x19a>
 8000d8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d8e:	07d9      	lsls	r1, r3, #31
 8000d90:	d405      	bmi.n	8000d9e <_vfiprintf_r+0x1fe>
 8000d92:	89ab      	ldrh	r3, [r5, #12]
 8000d94:	059a      	lsls	r2, r3, #22
 8000d96:	d402      	bmi.n	8000d9e <_vfiprintf_r+0x1fe>
 8000d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d9a:	f7ff fddd 	bl	8000958 <__retarget_lock_release_recursive>
 8000d9e:	89ab      	ldrh	r3, [r5, #12]
 8000da0:	065b      	lsls	r3, r3, #25
 8000da2:	f53f af1f 	bmi.w	8000be4 <_vfiprintf_r+0x44>
 8000da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000da8:	e71e      	b.n	8000be8 <_vfiprintf_r+0x48>
 8000daa:	ab03      	add	r3, sp, #12
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	462a      	mov	r2, r5
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <_vfiprintf_r+0x228>)
 8000db2:	a904      	add	r1, sp, #16
 8000db4:	4630      	mov	r0, r6
 8000db6:	f000 f879 	bl	8000eac <_printf_i>
 8000dba:	e7e4      	b.n	8000d86 <_vfiprintf_r+0x1e6>
 8000dbc:	080014c1 	.word	0x080014c1
 8000dc0:	080014cb 	.word	0x080014cb
 8000dc4:	00000000 	.word	0x00000000
 8000dc8:	08000b7b 	.word	0x08000b7b
 8000dcc:	080014c7 	.word	0x080014c7

08000dd0 <_printf_common>:
 8000dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd4:	4616      	mov	r6, r2
 8000dd6:	4698      	mov	r8, r3
 8000dd8:	688a      	ldr	r2, [r1, #8]
 8000dda:	690b      	ldr	r3, [r1, #16]
 8000ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000de0:	4293      	cmp	r3, r2
 8000de2:	bfb8      	it	lt
 8000de4:	4613      	movlt	r3, r2
 8000de6:	6033      	str	r3, [r6, #0]
 8000de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000dec:	4607      	mov	r7, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	b10a      	cbz	r2, 8000df6 <_printf_common+0x26>
 8000df2:	3301      	adds	r3, #1
 8000df4:	6033      	str	r3, [r6, #0]
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	0699      	lsls	r1, r3, #26
 8000dfa:	bf42      	ittt	mi
 8000dfc:	6833      	ldrmi	r3, [r6, #0]
 8000dfe:	3302      	addmi	r3, #2
 8000e00:	6033      	strmi	r3, [r6, #0]
 8000e02:	6825      	ldr	r5, [r4, #0]
 8000e04:	f015 0506 	ands.w	r5, r5, #6
 8000e08:	d106      	bne.n	8000e18 <_printf_common+0x48>
 8000e0a:	f104 0a19 	add.w	sl, r4, #25
 8000e0e:	68e3      	ldr	r3, [r4, #12]
 8000e10:	6832      	ldr	r2, [r6, #0]
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	42ab      	cmp	r3, r5
 8000e16:	dc26      	bgt.n	8000e66 <_printf_common+0x96>
 8000e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e1c:	6822      	ldr	r2, [r4, #0]
 8000e1e:	3b00      	subs	r3, #0
 8000e20:	bf18      	it	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	0692      	lsls	r2, r2, #26
 8000e26:	d42b      	bmi.n	8000e80 <_printf_common+0xb0>
 8000e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e2c:	4641      	mov	r1, r8
 8000e2e:	4638      	mov	r0, r7
 8000e30:	47c8      	blx	r9
 8000e32:	3001      	adds	r0, #1
 8000e34:	d01e      	beq.n	8000e74 <_printf_common+0xa4>
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	6922      	ldr	r2, [r4, #16]
 8000e3a:	f003 0306 	and.w	r3, r3, #6
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf02      	ittt	eq
 8000e42:	68e5      	ldreq	r5, [r4, #12]
 8000e44:	6833      	ldreq	r3, [r6, #0]
 8000e46:	1aed      	subeq	r5, r5, r3
 8000e48:	68a3      	ldr	r3, [r4, #8]
 8000e4a:	bf0c      	ite	eq
 8000e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e50:	2500      	movne	r5, #0
 8000e52:	4293      	cmp	r3, r2
 8000e54:	bfc4      	itt	gt
 8000e56:	1a9b      	subgt	r3, r3, r2
 8000e58:	18ed      	addgt	r5, r5, r3
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	341a      	adds	r4, #26
 8000e5e:	42b5      	cmp	r5, r6
 8000e60:	d11a      	bne.n	8000e98 <_printf_common+0xc8>
 8000e62:	2000      	movs	r0, #0
 8000e64:	e008      	b.n	8000e78 <_printf_common+0xa8>
 8000e66:	2301      	movs	r3, #1
 8000e68:	4652      	mov	r2, sl
 8000e6a:	4641      	mov	r1, r8
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	47c8      	blx	r9
 8000e70:	3001      	adds	r0, #1
 8000e72:	d103      	bne.n	8000e7c <_printf_common+0xac>
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7c:	3501      	adds	r5, #1
 8000e7e:	e7c6      	b.n	8000e0e <_printf_common+0x3e>
 8000e80:	18e1      	adds	r1, r4, r3
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	2030      	movs	r0, #48	@ 0x30
 8000e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e8a:	4422      	add	r2, r4
 8000e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e94:	3302      	adds	r3, #2
 8000e96:	e7c7      	b.n	8000e28 <_printf_common+0x58>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	4622      	mov	r2, r4
 8000e9c:	4641      	mov	r1, r8
 8000e9e:	4638      	mov	r0, r7
 8000ea0:	47c8      	blx	r9
 8000ea2:	3001      	adds	r0, #1
 8000ea4:	d0e6      	beq.n	8000e74 <_printf_common+0xa4>
 8000ea6:	3601      	adds	r6, #1
 8000ea8:	e7d9      	b.n	8000e5e <_printf_common+0x8e>
	...

08000eac <_printf_i>:
 8000eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb0:	7e0f      	ldrb	r7, [r1, #24]
 8000eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000eb4:	2f78      	cmp	r7, #120	@ 0x78
 8000eb6:	4691      	mov	r9, r2
 8000eb8:	4680      	mov	r8, r0
 8000eba:	460c      	mov	r4, r1
 8000ebc:	469a      	mov	sl, r3
 8000ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000ec2:	d807      	bhi.n	8000ed4 <_printf_i+0x28>
 8000ec4:	2f62      	cmp	r7, #98	@ 0x62
 8000ec6:	d80a      	bhi.n	8000ede <_printf_i+0x32>
 8000ec8:	2f00      	cmp	r7, #0
 8000eca:	f000 80d1 	beq.w	8001070 <_printf_i+0x1c4>
 8000ece:	2f58      	cmp	r7, #88	@ 0x58
 8000ed0:	f000 80b8 	beq.w	8001044 <_printf_i+0x198>
 8000ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000edc:	e03a      	b.n	8000f54 <_printf_i+0xa8>
 8000ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ee2:	2b15      	cmp	r3, #21
 8000ee4:	d8f6      	bhi.n	8000ed4 <_printf_i+0x28>
 8000ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8000eec <_printf_i+0x40>)
 8000ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000eec:	08000f45 	.word	0x08000f45
 8000ef0:	08000f59 	.word	0x08000f59
 8000ef4:	08000ed5 	.word	0x08000ed5
 8000ef8:	08000ed5 	.word	0x08000ed5
 8000efc:	08000ed5 	.word	0x08000ed5
 8000f00:	08000ed5 	.word	0x08000ed5
 8000f04:	08000f59 	.word	0x08000f59
 8000f08:	08000ed5 	.word	0x08000ed5
 8000f0c:	08000ed5 	.word	0x08000ed5
 8000f10:	08000ed5 	.word	0x08000ed5
 8000f14:	08000ed5 	.word	0x08000ed5
 8000f18:	08001057 	.word	0x08001057
 8000f1c:	08000f83 	.word	0x08000f83
 8000f20:	08001011 	.word	0x08001011
 8000f24:	08000ed5 	.word	0x08000ed5
 8000f28:	08000ed5 	.word	0x08000ed5
 8000f2c:	08001079 	.word	0x08001079
 8000f30:	08000ed5 	.word	0x08000ed5
 8000f34:	08000f83 	.word	0x08000f83
 8000f38:	08000ed5 	.word	0x08000ed5
 8000f3c:	08000ed5 	.word	0x08000ed5
 8000f40:	08001019 	.word	0x08001019
 8000f44:	6833      	ldr	r3, [r6, #0]
 8000f46:	1d1a      	adds	r2, r3, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6032      	str	r2, [r6, #0]
 8000f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f54:	2301      	movs	r3, #1
 8000f56:	e09c      	b.n	8001092 <_printf_i+0x1e6>
 8000f58:	6833      	ldr	r3, [r6, #0]
 8000f5a:	6820      	ldr	r0, [r4, #0]
 8000f5c:	1d19      	adds	r1, r3, #4
 8000f5e:	6031      	str	r1, [r6, #0]
 8000f60:	0606      	lsls	r6, r0, #24
 8000f62:	d501      	bpl.n	8000f68 <_printf_i+0xbc>
 8000f64:	681d      	ldr	r5, [r3, #0]
 8000f66:	e003      	b.n	8000f70 <_printf_i+0xc4>
 8000f68:	0645      	lsls	r5, r0, #25
 8000f6a:	d5fb      	bpl.n	8000f64 <_printf_i+0xb8>
 8000f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f70:	2d00      	cmp	r5, #0
 8000f72:	da03      	bge.n	8000f7c <_printf_i+0xd0>
 8000f74:	232d      	movs	r3, #45	@ 0x2d
 8000f76:	426d      	negs	r5, r5
 8000f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f7c:	4858      	ldr	r0, [pc, #352]	@ (80010e0 <_printf_i+0x234>)
 8000f7e:	230a      	movs	r3, #10
 8000f80:	e011      	b.n	8000fa6 <_printf_i+0xfa>
 8000f82:	6821      	ldr	r1, [r4, #0]
 8000f84:	6833      	ldr	r3, [r6, #0]
 8000f86:	0608      	lsls	r0, r1, #24
 8000f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f8c:	d402      	bmi.n	8000f94 <_printf_i+0xe8>
 8000f8e:	0649      	lsls	r1, r1, #25
 8000f90:	bf48      	it	mi
 8000f92:	b2ad      	uxthmi	r5, r5
 8000f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f96:	4852      	ldr	r0, [pc, #328]	@ (80010e0 <_printf_i+0x234>)
 8000f98:	6033      	str	r3, [r6, #0]
 8000f9a:	bf14      	ite	ne
 8000f9c:	230a      	movne	r3, #10
 8000f9e:	2308      	moveq	r3, #8
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000fa6:	6866      	ldr	r6, [r4, #4]
 8000fa8:	60a6      	str	r6, [r4, #8]
 8000faa:	2e00      	cmp	r6, #0
 8000fac:	db05      	blt.n	8000fba <_printf_i+0x10e>
 8000fae:	6821      	ldr	r1, [r4, #0]
 8000fb0:	432e      	orrs	r6, r5
 8000fb2:	f021 0104 	bic.w	r1, r1, #4
 8000fb6:	6021      	str	r1, [r4, #0]
 8000fb8:	d04b      	beq.n	8001052 <_printf_i+0x1a6>
 8000fba:	4616      	mov	r6, r2
 8000fbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8000fc0:	fb03 5711 	mls	r7, r3, r1, r5
 8000fc4:	5dc7      	ldrb	r7, [r0, r7]
 8000fc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000fca:	462f      	mov	r7, r5
 8000fcc:	42bb      	cmp	r3, r7
 8000fce:	460d      	mov	r5, r1
 8000fd0:	d9f4      	bls.n	8000fbc <_printf_i+0x110>
 8000fd2:	2b08      	cmp	r3, #8
 8000fd4:	d10b      	bne.n	8000fee <_printf_i+0x142>
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	07df      	lsls	r7, r3, #31
 8000fda:	d508      	bpl.n	8000fee <_printf_i+0x142>
 8000fdc:	6923      	ldr	r3, [r4, #16]
 8000fde:	6861      	ldr	r1, [r4, #4]
 8000fe0:	4299      	cmp	r1, r3
 8000fe2:	bfde      	ittt	le
 8000fe4:	2330      	movle	r3, #48	@ 0x30
 8000fe6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000fee:	1b92      	subs	r2, r2, r6
 8000ff0:	6122      	str	r2, [r4, #16]
 8000ff2:	f8cd a000 	str.w	sl, [sp]
 8000ff6:	464b      	mov	r3, r9
 8000ff8:	aa03      	add	r2, sp, #12
 8000ffa:	4621      	mov	r1, r4
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	f7ff fee7 	bl	8000dd0 <_printf_common>
 8001002:	3001      	adds	r0, #1
 8001004:	d14a      	bne.n	800109c <_printf_i+0x1f0>
 8001006:	f04f 30ff 	mov.w	r0, #4294967295
 800100a:	b004      	add	sp, #16
 800100c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	f043 0320 	orr.w	r3, r3, #32
 8001016:	6023      	str	r3, [r4, #0]
 8001018:	4832      	ldr	r0, [pc, #200]	@ (80010e4 <_printf_i+0x238>)
 800101a:	2778      	movs	r7, #120	@ 0x78
 800101c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	6831      	ldr	r1, [r6, #0]
 8001024:	061f      	lsls	r7, r3, #24
 8001026:	f851 5b04 	ldr.w	r5, [r1], #4
 800102a:	d402      	bmi.n	8001032 <_printf_i+0x186>
 800102c:	065f      	lsls	r7, r3, #25
 800102e:	bf48      	it	mi
 8001030:	b2ad      	uxthmi	r5, r5
 8001032:	6031      	str	r1, [r6, #0]
 8001034:	07d9      	lsls	r1, r3, #31
 8001036:	bf44      	itt	mi
 8001038:	f043 0320 	orrmi.w	r3, r3, #32
 800103c:	6023      	strmi	r3, [r4, #0]
 800103e:	b11d      	cbz	r5, 8001048 <_printf_i+0x19c>
 8001040:	2310      	movs	r3, #16
 8001042:	e7ad      	b.n	8000fa0 <_printf_i+0xf4>
 8001044:	4826      	ldr	r0, [pc, #152]	@ (80010e0 <_printf_i+0x234>)
 8001046:	e7e9      	b.n	800101c <_printf_i+0x170>
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	f023 0320 	bic.w	r3, r3, #32
 800104e:	6023      	str	r3, [r4, #0]
 8001050:	e7f6      	b.n	8001040 <_printf_i+0x194>
 8001052:	4616      	mov	r6, r2
 8001054:	e7bd      	b.n	8000fd2 <_printf_i+0x126>
 8001056:	6833      	ldr	r3, [r6, #0]
 8001058:	6825      	ldr	r5, [r4, #0]
 800105a:	6961      	ldr	r1, [r4, #20]
 800105c:	1d18      	adds	r0, r3, #4
 800105e:	6030      	str	r0, [r6, #0]
 8001060:	062e      	lsls	r6, r5, #24
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	d501      	bpl.n	800106a <_printf_i+0x1be>
 8001066:	6019      	str	r1, [r3, #0]
 8001068:	e002      	b.n	8001070 <_printf_i+0x1c4>
 800106a:	0668      	lsls	r0, r5, #25
 800106c:	d5fb      	bpl.n	8001066 <_printf_i+0x1ba>
 800106e:	8019      	strh	r1, [r3, #0]
 8001070:	2300      	movs	r3, #0
 8001072:	6123      	str	r3, [r4, #16]
 8001074:	4616      	mov	r6, r2
 8001076:	e7bc      	b.n	8000ff2 <_printf_i+0x146>
 8001078:	6833      	ldr	r3, [r6, #0]
 800107a:	1d1a      	adds	r2, r3, #4
 800107c:	6032      	str	r2, [r6, #0]
 800107e:	681e      	ldr	r6, [r3, #0]
 8001080:	6862      	ldr	r2, [r4, #4]
 8001082:	2100      	movs	r1, #0
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff f8c3 	bl	8000210 <memchr>
 800108a:	b108      	cbz	r0, 8001090 <_printf_i+0x1e4>
 800108c:	1b80      	subs	r0, r0, r6
 800108e:	6060      	str	r0, [r4, #4]
 8001090:	6863      	ldr	r3, [r4, #4]
 8001092:	6123      	str	r3, [r4, #16]
 8001094:	2300      	movs	r3, #0
 8001096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800109a:	e7aa      	b.n	8000ff2 <_printf_i+0x146>
 800109c:	6923      	ldr	r3, [r4, #16]
 800109e:	4632      	mov	r2, r6
 80010a0:	4649      	mov	r1, r9
 80010a2:	4640      	mov	r0, r8
 80010a4:	47d0      	blx	sl
 80010a6:	3001      	adds	r0, #1
 80010a8:	d0ad      	beq.n	8001006 <_printf_i+0x15a>
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	079b      	lsls	r3, r3, #30
 80010ae:	d413      	bmi.n	80010d8 <_printf_i+0x22c>
 80010b0:	68e0      	ldr	r0, [r4, #12]
 80010b2:	9b03      	ldr	r3, [sp, #12]
 80010b4:	4298      	cmp	r0, r3
 80010b6:	bfb8      	it	lt
 80010b8:	4618      	movlt	r0, r3
 80010ba:	e7a6      	b.n	800100a <_printf_i+0x15e>
 80010bc:	2301      	movs	r3, #1
 80010be:	4632      	mov	r2, r6
 80010c0:	4649      	mov	r1, r9
 80010c2:	4640      	mov	r0, r8
 80010c4:	47d0      	blx	sl
 80010c6:	3001      	adds	r0, #1
 80010c8:	d09d      	beq.n	8001006 <_printf_i+0x15a>
 80010ca:	3501      	adds	r5, #1
 80010cc:	68e3      	ldr	r3, [r4, #12]
 80010ce:	9903      	ldr	r1, [sp, #12]
 80010d0:	1a5b      	subs	r3, r3, r1
 80010d2:	42ab      	cmp	r3, r5
 80010d4:	dcf2      	bgt.n	80010bc <_printf_i+0x210>
 80010d6:	e7eb      	b.n	80010b0 <_printf_i+0x204>
 80010d8:	2500      	movs	r5, #0
 80010da:	f104 0619 	add.w	r6, r4, #25
 80010de:	e7f5      	b.n	80010cc <_printf_i+0x220>
 80010e0:	080014d2 	.word	0x080014d2
 80010e4:	080014e3 	.word	0x080014e3

080010e8 <__sflush_r>:
 80010e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80010ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010f0:	0716      	lsls	r6, r2, #28
 80010f2:	4605      	mov	r5, r0
 80010f4:	460c      	mov	r4, r1
 80010f6:	d454      	bmi.n	80011a2 <__sflush_r+0xba>
 80010f8:	684b      	ldr	r3, [r1, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dc02      	bgt.n	8001104 <__sflush_r+0x1c>
 80010fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001100:	2b00      	cmp	r3, #0
 8001102:	dd48      	ble.n	8001196 <__sflush_r+0xae>
 8001104:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001106:	2e00      	cmp	r6, #0
 8001108:	d045      	beq.n	8001196 <__sflush_r+0xae>
 800110a:	2300      	movs	r3, #0
 800110c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001110:	682f      	ldr	r7, [r5, #0]
 8001112:	6a21      	ldr	r1, [r4, #32]
 8001114:	602b      	str	r3, [r5, #0]
 8001116:	d030      	beq.n	800117a <__sflush_r+0x92>
 8001118:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800111a:	89a3      	ldrh	r3, [r4, #12]
 800111c:	0759      	lsls	r1, r3, #29
 800111e:	d505      	bpl.n	800112c <__sflush_r+0x44>
 8001120:	6863      	ldr	r3, [r4, #4]
 8001122:	1ad2      	subs	r2, r2, r3
 8001124:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001126:	b10b      	cbz	r3, 800112c <__sflush_r+0x44>
 8001128:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800112a:	1ad2      	subs	r2, r2, r3
 800112c:	2300      	movs	r3, #0
 800112e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001130:	6a21      	ldr	r1, [r4, #32]
 8001132:	4628      	mov	r0, r5
 8001134:	47b0      	blx	r6
 8001136:	1c43      	adds	r3, r0, #1
 8001138:	89a3      	ldrh	r3, [r4, #12]
 800113a:	d106      	bne.n	800114a <__sflush_r+0x62>
 800113c:	6829      	ldr	r1, [r5, #0]
 800113e:	291d      	cmp	r1, #29
 8001140:	d82b      	bhi.n	800119a <__sflush_r+0xb2>
 8001142:	4a2a      	ldr	r2, [pc, #168]	@ (80011ec <__sflush_r+0x104>)
 8001144:	40ca      	lsrs	r2, r1
 8001146:	07d6      	lsls	r6, r2, #31
 8001148:	d527      	bpl.n	800119a <__sflush_r+0xb2>
 800114a:	2200      	movs	r2, #0
 800114c:	6062      	str	r2, [r4, #4]
 800114e:	04d9      	lsls	r1, r3, #19
 8001150:	6922      	ldr	r2, [r4, #16]
 8001152:	6022      	str	r2, [r4, #0]
 8001154:	d504      	bpl.n	8001160 <__sflush_r+0x78>
 8001156:	1c42      	adds	r2, r0, #1
 8001158:	d101      	bne.n	800115e <__sflush_r+0x76>
 800115a:	682b      	ldr	r3, [r5, #0]
 800115c:	b903      	cbnz	r3, 8001160 <__sflush_r+0x78>
 800115e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001160:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001162:	602f      	str	r7, [r5, #0]
 8001164:	b1b9      	cbz	r1, 8001196 <__sflush_r+0xae>
 8001166:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800116a:	4299      	cmp	r1, r3
 800116c:	d002      	beq.n	8001174 <__sflush_r+0x8c>
 800116e:	4628      	mov	r0, r5
 8001170:	f7ff fbf4 	bl	800095c <_free_r>
 8001174:	2300      	movs	r3, #0
 8001176:	6363      	str	r3, [r4, #52]	@ 0x34
 8001178:	e00d      	b.n	8001196 <__sflush_r+0xae>
 800117a:	2301      	movs	r3, #1
 800117c:	4628      	mov	r0, r5
 800117e:	47b0      	blx	r6
 8001180:	4602      	mov	r2, r0
 8001182:	1c50      	adds	r0, r2, #1
 8001184:	d1c9      	bne.n	800111a <__sflush_r+0x32>
 8001186:	682b      	ldr	r3, [r5, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0c6      	beq.n	800111a <__sflush_r+0x32>
 800118c:	2b1d      	cmp	r3, #29
 800118e:	d001      	beq.n	8001194 <__sflush_r+0xac>
 8001190:	2b16      	cmp	r3, #22
 8001192:	d11e      	bne.n	80011d2 <__sflush_r+0xea>
 8001194:	602f      	str	r7, [r5, #0]
 8001196:	2000      	movs	r0, #0
 8001198:	e022      	b.n	80011e0 <__sflush_r+0xf8>
 800119a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119e:	b21b      	sxth	r3, r3
 80011a0:	e01b      	b.n	80011da <__sflush_r+0xf2>
 80011a2:	690f      	ldr	r7, [r1, #16]
 80011a4:	2f00      	cmp	r7, #0
 80011a6:	d0f6      	beq.n	8001196 <__sflush_r+0xae>
 80011a8:	0793      	lsls	r3, r2, #30
 80011aa:	680e      	ldr	r6, [r1, #0]
 80011ac:	bf08      	it	eq
 80011ae:	694b      	ldreq	r3, [r1, #20]
 80011b0:	600f      	str	r7, [r1, #0]
 80011b2:	bf18      	it	ne
 80011b4:	2300      	movne	r3, #0
 80011b6:	eba6 0807 	sub.w	r8, r6, r7
 80011ba:	608b      	str	r3, [r1, #8]
 80011bc:	f1b8 0f00 	cmp.w	r8, #0
 80011c0:	dde9      	ble.n	8001196 <__sflush_r+0xae>
 80011c2:	6a21      	ldr	r1, [r4, #32]
 80011c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80011c6:	4643      	mov	r3, r8
 80011c8:	463a      	mov	r2, r7
 80011ca:	4628      	mov	r0, r5
 80011cc:	47b0      	blx	r6
 80011ce:	2800      	cmp	r0, #0
 80011d0:	dc08      	bgt.n	80011e4 <__sflush_r+0xfc>
 80011d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011da:	81a3      	strh	r3, [r4, #12]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011e4:	4407      	add	r7, r0
 80011e6:	eba8 0800 	sub.w	r8, r8, r0
 80011ea:	e7e7      	b.n	80011bc <__sflush_r+0xd4>
 80011ec:	20400001 	.word	0x20400001

080011f0 <_fflush_r>:
 80011f0:	b538      	push	{r3, r4, r5, lr}
 80011f2:	690b      	ldr	r3, [r1, #16]
 80011f4:	4605      	mov	r5, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	b913      	cbnz	r3, 8001200 <_fflush_r+0x10>
 80011fa:	2500      	movs	r5, #0
 80011fc:	4628      	mov	r0, r5
 80011fe:	bd38      	pop	{r3, r4, r5, pc}
 8001200:	b118      	cbz	r0, 800120a <_fflush_r+0x1a>
 8001202:	6a03      	ldr	r3, [r0, #32]
 8001204:	b90b      	cbnz	r3, 800120a <_fflush_r+0x1a>
 8001206:	f7ff faa1 	bl	800074c <__sinit>
 800120a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f3      	beq.n	80011fa <_fflush_r+0xa>
 8001212:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001214:	07d0      	lsls	r0, r2, #31
 8001216:	d404      	bmi.n	8001222 <_fflush_r+0x32>
 8001218:	0599      	lsls	r1, r3, #22
 800121a:	d402      	bmi.n	8001222 <_fflush_r+0x32>
 800121c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800121e:	f7ff fb9a 	bl	8000956 <__retarget_lock_acquire_recursive>
 8001222:	4628      	mov	r0, r5
 8001224:	4621      	mov	r1, r4
 8001226:	f7ff ff5f 	bl	80010e8 <__sflush_r>
 800122a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800122c:	07da      	lsls	r2, r3, #31
 800122e:	4605      	mov	r5, r0
 8001230:	d4e4      	bmi.n	80011fc <_fflush_r+0xc>
 8001232:	89a3      	ldrh	r3, [r4, #12]
 8001234:	059b      	lsls	r3, r3, #22
 8001236:	d4e1      	bmi.n	80011fc <_fflush_r+0xc>
 8001238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800123a:	f7ff fb8d 	bl	8000958 <__retarget_lock_release_recursive>
 800123e:	e7dd      	b.n	80011fc <_fflush_r+0xc>

08001240 <__swbuf_r>:
 8001240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001242:	460e      	mov	r6, r1
 8001244:	4614      	mov	r4, r2
 8001246:	4605      	mov	r5, r0
 8001248:	b118      	cbz	r0, 8001252 <__swbuf_r+0x12>
 800124a:	6a03      	ldr	r3, [r0, #32]
 800124c:	b90b      	cbnz	r3, 8001252 <__swbuf_r+0x12>
 800124e:	f7ff fa7d 	bl	800074c <__sinit>
 8001252:	69a3      	ldr	r3, [r4, #24]
 8001254:	60a3      	str	r3, [r4, #8]
 8001256:	89a3      	ldrh	r3, [r4, #12]
 8001258:	071a      	lsls	r2, r3, #28
 800125a:	d501      	bpl.n	8001260 <__swbuf_r+0x20>
 800125c:	6923      	ldr	r3, [r4, #16]
 800125e:	b943      	cbnz	r3, 8001272 <__swbuf_r+0x32>
 8001260:	4621      	mov	r1, r4
 8001262:	4628      	mov	r0, r5
 8001264:	f000 f82a 	bl	80012bc <__swsetup_r>
 8001268:	b118      	cbz	r0, 8001272 <__swbuf_r+0x32>
 800126a:	f04f 37ff 	mov.w	r7, #4294967295
 800126e:	4638      	mov	r0, r7
 8001270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	6922      	ldr	r2, [r4, #16]
 8001276:	1a98      	subs	r0, r3, r2
 8001278:	6963      	ldr	r3, [r4, #20]
 800127a:	b2f6      	uxtb	r6, r6
 800127c:	4283      	cmp	r3, r0
 800127e:	4637      	mov	r7, r6
 8001280:	dc05      	bgt.n	800128e <__swbuf_r+0x4e>
 8001282:	4621      	mov	r1, r4
 8001284:	4628      	mov	r0, r5
 8001286:	f7ff ffb3 	bl	80011f0 <_fflush_r>
 800128a:	2800      	cmp	r0, #0
 800128c:	d1ed      	bne.n	800126a <__swbuf_r+0x2a>
 800128e:	68a3      	ldr	r3, [r4, #8]
 8001290:	3b01      	subs	r3, #1
 8001292:	60a3      	str	r3, [r4, #8]
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	6022      	str	r2, [r4, #0]
 800129a:	701e      	strb	r6, [r3, #0]
 800129c:	6962      	ldr	r2, [r4, #20]
 800129e:	1c43      	adds	r3, r0, #1
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d004      	beq.n	80012ae <__swbuf_r+0x6e>
 80012a4:	89a3      	ldrh	r3, [r4, #12]
 80012a6:	07db      	lsls	r3, r3, #31
 80012a8:	d5e1      	bpl.n	800126e <__swbuf_r+0x2e>
 80012aa:	2e0a      	cmp	r6, #10
 80012ac:	d1df      	bne.n	800126e <__swbuf_r+0x2e>
 80012ae:	4621      	mov	r1, r4
 80012b0:	4628      	mov	r0, r5
 80012b2:	f7ff ff9d 	bl	80011f0 <_fflush_r>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d0d9      	beq.n	800126e <__swbuf_r+0x2e>
 80012ba:	e7d6      	b.n	800126a <__swbuf_r+0x2a>

080012bc <__swsetup_r>:
 80012bc:	b538      	push	{r3, r4, r5, lr}
 80012be:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <__swsetup_r+0xa8>)
 80012c0:	4605      	mov	r5, r0
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	460c      	mov	r4, r1
 80012c6:	b118      	cbz	r0, 80012d0 <__swsetup_r+0x14>
 80012c8:	6a03      	ldr	r3, [r0, #32]
 80012ca:	b90b      	cbnz	r3, 80012d0 <__swsetup_r+0x14>
 80012cc:	f7ff fa3e 	bl	800074c <__sinit>
 80012d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012d4:	0719      	lsls	r1, r3, #28
 80012d6:	d422      	bmi.n	800131e <__swsetup_r+0x62>
 80012d8:	06da      	lsls	r2, r3, #27
 80012da:	d407      	bmi.n	80012ec <__swsetup_r+0x30>
 80012dc:	2209      	movs	r2, #9
 80012de:	602a      	str	r2, [r5, #0]
 80012e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e4:	81a3      	strh	r3, [r4, #12]
 80012e6:	f04f 30ff 	mov.w	r0, #4294967295
 80012ea:	e033      	b.n	8001354 <__swsetup_r+0x98>
 80012ec:	0758      	lsls	r0, r3, #29
 80012ee:	d512      	bpl.n	8001316 <__swsetup_r+0x5a>
 80012f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012f2:	b141      	cbz	r1, 8001306 <__swsetup_r+0x4a>
 80012f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012f8:	4299      	cmp	r1, r3
 80012fa:	d002      	beq.n	8001302 <__swsetup_r+0x46>
 80012fc:	4628      	mov	r0, r5
 80012fe:	f7ff fb2d 	bl	800095c <_free_r>
 8001302:	2300      	movs	r3, #0
 8001304:	6363      	str	r3, [r4, #52]	@ 0x34
 8001306:	89a3      	ldrh	r3, [r4, #12]
 8001308:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800130c:	81a3      	strh	r3, [r4, #12]
 800130e:	2300      	movs	r3, #0
 8001310:	6063      	str	r3, [r4, #4]
 8001312:	6923      	ldr	r3, [r4, #16]
 8001314:	6023      	str	r3, [r4, #0]
 8001316:	89a3      	ldrh	r3, [r4, #12]
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	81a3      	strh	r3, [r4, #12]
 800131e:	6923      	ldr	r3, [r4, #16]
 8001320:	b94b      	cbnz	r3, 8001336 <__swsetup_r+0x7a>
 8001322:	89a3      	ldrh	r3, [r4, #12]
 8001324:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800132c:	d003      	beq.n	8001336 <__swsetup_r+0x7a>
 800132e:	4621      	mov	r1, r4
 8001330:	4628      	mov	r0, r5
 8001332:	f000 f84f 	bl	80013d4 <__smakebuf_r>
 8001336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800133a:	f013 0201 	ands.w	r2, r3, #1
 800133e:	d00a      	beq.n	8001356 <__swsetup_r+0x9a>
 8001340:	2200      	movs	r2, #0
 8001342:	60a2      	str	r2, [r4, #8]
 8001344:	6962      	ldr	r2, [r4, #20]
 8001346:	4252      	negs	r2, r2
 8001348:	61a2      	str	r2, [r4, #24]
 800134a:	6922      	ldr	r2, [r4, #16]
 800134c:	b942      	cbnz	r2, 8001360 <__swsetup_r+0xa4>
 800134e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001352:	d1c5      	bne.n	80012e0 <__swsetup_r+0x24>
 8001354:	bd38      	pop	{r3, r4, r5, pc}
 8001356:	0799      	lsls	r1, r3, #30
 8001358:	bf58      	it	pl
 800135a:	6962      	ldrpl	r2, [r4, #20]
 800135c:	60a2      	str	r2, [r4, #8]
 800135e:	e7f4      	b.n	800134a <__swsetup_r+0x8e>
 8001360:	2000      	movs	r0, #0
 8001362:	e7f7      	b.n	8001354 <__swsetup_r+0x98>
 8001364:	20000010 	.word	0x20000010

08001368 <_sbrk_r>:
 8001368:	b538      	push	{r3, r4, r5, lr}
 800136a:	4d06      	ldr	r5, [pc, #24]	@ (8001384 <_sbrk_r+0x1c>)
 800136c:	2300      	movs	r3, #0
 800136e:	4604      	mov	r4, r0
 8001370:	4608      	mov	r0, r1
 8001372:	602b      	str	r3, [r5, #0]
 8001374:	f7ff f842 	bl	80003fc <_sbrk>
 8001378:	1c43      	adds	r3, r0, #1
 800137a:	d102      	bne.n	8001382 <_sbrk_r+0x1a>
 800137c:	682b      	ldr	r3, [r5, #0]
 800137e:	b103      	cbz	r3, 8001382 <_sbrk_r+0x1a>
 8001380:	6023      	str	r3, [r4, #0]
 8001382:	bd38      	pop	{r3, r4, r5, pc}
 8001384:	200001c0 	.word	0x200001c0

08001388 <__swhatbuf_r>:
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	460c      	mov	r4, r1
 800138c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001390:	2900      	cmp	r1, #0
 8001392:	b096      	sub	sp, #88	@ 0x58
 8001394:	4615      	mov	r5, r2
 8001396:	461e      	mov	r6, r3
 8001398:	da0d      	bge.n	80013b6 <__swhatbuf_r+0x2e>
 800139a:	89a3      	ldrh	r3, [r4, #12]
 800139c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013a0:	f04f 0100 	mov.w	r1, #0
 80013a4:	bf14      	ite	ne
 80013a6:	2340      	movne	r3, #64	@ 0x40
 80013a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013ac:	2000      	movs	r0, #0
 80013ae:	6031      	str	r1, [r6, #0]
 80013b0:	602b      	str	r3, [r5, #0]
 80013b2:	b016      	add	sp, #88	@ 0x58
 80013b4:	bd70      	pop	{r4, r5, r6, pc}
 80013b6:	466a      	mov	r2, sp
 80013b8:	f000 f848 	bl	800144c <_fstat_r>
 80013bc:	2800      	cmp	r0, #0
 80013be:	dbec      	blt.n	800139a <__swhatbuf_r+0x12>
 80013c0:	9901      	ldr	r1, [sp, #4]
 80013c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013ca:	4259      	negs	r1, r3
 80013cc:	4159      	adcs	r1, r3
 80013ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d2:	e7eb      	b.n	80013ac <__swhatbuf_r+0x24>

080013d4 <__smakebuf_r>:
 80013d4:	898b      	ldrh	r3, [r1, #12]
 80013d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013d8:	079d      	lsls	r5, r3, #30
 80013da:	4606      	mov	r6, r0
 80013dc:	460c      	mov	r4, r1
 80013de:	d507      	bpl.n	80013f0 <__smakebuf_r+0x1c>
 80013e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	6123      	str	r3, [r4, #16]
 80013e8:	2301      	movs	r3, #1
 80013ea:	6163      	str	r3, [r4, #20]
 80013ec:	b003      	add	sp, #12
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f0:	ab01      	add	r3, sp, #4
 80013f2:	466a      	mov	r2, sp
 80013f4:	f7ff ffc8 	bl	8001388 <__swhatbuf_r>
 80013f8:	9f00      	ldr	r7, [sp, #0]
 80013fa:	4605      	mov	r5, r0
 80013fc:	4639      	mov	r1, r7
 80013fe:	4630      	mov	r0, r6
 8001400:	f7ff fb18 	bl	8000a34 <_malloc_r>
 8001404:	b948      	cbnz	r0, 800141a <__smakebuf_r+0x46>
 8001406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800140a:	059a      	lsls	r2, r3, #22
 800140c:	d4ee      	bmi.n	80013ec <__smakebuf_r+0x18>
 800140e:	f023 0303 	bic.w	r3, r3, #3
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	81a3      	strh	r3, [r4, #12]
 8001418:	e7e2      	b.n	80013e0 <__smakebuf_r+0xc>
 800141a:	89a3      	ldrh	r3, [r4, #12]
 800141c:	6020      	str	r0, [r4, #0]
 800141e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001422:	81a3      	strh	r3, [r4, #12]
 8001424:	9b01      	ldr	r3, [sp, #4]
 8001426:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800142a:	b15b      	cbz	r3, 8001444 <__smakebuf_r+0x70>
 800142c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001430:	4630      	mov	r0, r6
 8001432:	f000 f81d 	bl	8001470 <_isatty_r>
 8001436:	b128      	cbz	r0, 8001444 <__smakebuf_r+0x70>
 8001438:	89a3      	ldrh	r3, [r4, #12]
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	81a3      	strh	r3, [r4, #12]
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	431d      	orrs	r5, r3
 8001448:	81a5      	strh	r5, [r4, #12]
 800144a:	e7cf      	b.n	80013ec <__smakebuf_r+0x18>

0800144c <_fstat_r>:
 800144c:	b538      	push	{r3, r4, r5, lr}
 800144e:	4d07      	ldr	r5, [pc, #28]	@ (800146c <_fstat_r+0x20>)
 8001450:	2300      	movs	r3, #0
 8001452:	4604      	mov	r4, r0
 8001454:	4608      	mov	r0, r1
 8001456:	4611      	mov	r1, r2
 8001458:	602b      	str	r3, [r5, #0]
 800145a:	f7fe ffa7 	bl	80003ac <_fstat>
 800145e:	1c43      	adds	r3, r0, #1
 8001460:	d102      	bne.n	8001468 <_fstat_r+0x1c>
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	b103      	cbz	r3, 8001468 <_fstat_r+0x1c>
 8001466:	6023      	str	r3, [r4, #0]
 8001468:	bd38      	pop	{r3, r4, r5, pc}
 800146a:	bf00      	nop
 800146c:	200001c0 	.word	0x200001c0

08001470 <_isatty_r>:
 8001470:	b538      	push	{r3, r4, r5, lr}
 8001472:	4d06      	ldr	r5, [pc, #24]	@ (800148c <_isatty_r+0x1c>)
 8001474:	2300      	movs	r3, #0
 8001476:	4604      	mov	r4, r0
 8001478:	4608      	mov	r0, r1
 800147a:	602b      	str	r3, [r5, #0]
 800147c:	f7fe ffa6 	bl	80003cc <_isatty>
 8001480:	1c43      	adds	r3, r0, #1
 8001482:	d102      	bne.n	800148a <_isatty_r+0x1a>
 8001484:	682b      	ldr	r3, [r5, #0]
 8001486:	b103      	cbz	r3, 800148a <_isatty_r+0x1a>
 8001488:	6023      	str	r3, [r4, #0]
 800148a:	bd38      	pop	{r3, r4, r5, pc}
 800148c:	200001c0 	.word	0x200001c0

08001490 <_init>:
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001492:	bf00      	nop
 8001494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001496:	bc08      	pop	{r3}
 8001498:	469e      	mov	lr, r3
 800149a:	4770      	bx	lr

0800149c <_fini>:
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149e:	bf00      	nop
 80014a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a2:	bc08      	pop	{r3}
 80014a4:	469e      	mov	lr, r3
 80014a6:	4770      	bx	lr
