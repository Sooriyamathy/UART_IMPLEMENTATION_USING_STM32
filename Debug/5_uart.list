
5_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000488  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800064c  0800064c  0000164c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000684  08000684  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000684  08000684  00001684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800068c  0800068c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800068c  0800068c  0000168c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000690  08000690  00001690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000694  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000004  08000698  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000698  00002040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a02  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000791  00000000  00000000  00003a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  000041c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000017e  00000000  00000000  000043f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a10a  00000000  00000000  0000456e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d14  00000000  00000000  0001e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4d05  00000000  00000000  0002138c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000660  00000000  00000000  000e60d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e6734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000634 	.word	0x08000634

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000634 	.word	0x08000634

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <command>:
// Buffer to store received command
char CommandBuffer[MAX_COMMAND_BUFFER];

// Function to process received command
void command(char key)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	// Static index to track buffer position
	static int i=0;

	// Check for end of command (newline, carriage return, or null character)
	if(key == '\0' || key == '\n' || key=='\r')
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d005      	beq.n	8000234 <command+0x1c>
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	2b0a      	cmp	r3, #10
 800022c:	d002      	beq.n	8000234 <command+0x1c>
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	2b0d      	cmp	r3, #13
 8000232:	d163      	bne.n	80002fc <command+0xe4>
	{
		// Null-terminate the command string
		CommandBuffer[i]='\0';
 8000234:	4b3a      	ldr	r3, [pc, #232]	@ (8000320 <command+0x108>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a3a      	ldr	r2, [pc, #232]	@ (8000324 <command+0x10c>)
 800023a:	2100      	movs	r1, #0
 800023c:	54d1      	strb	r1, [r2, r3]
		// Reset index for next command
		i=0;
 800023e:	4b38      	ldr	r3, [pc, #224]	@ (8000320 <command+0x108>)
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]

		// Check if received command is "LED_ON"
		if(strcmp(CommandBuffer,"LED_ON")==0)
 8000244:	4938      	ldr	r1, [pc, #224]	@ (8000328 <command+0x110>)
 8000246:	4837      	ldr	r0, [pc, #220]	@ (8000324 <command+0x10c>)
 8000248:	f7ff ffdc 	bl	8000204 <strcmp>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d11b      	bne.n	800028a <command+0x72>
		{
			// Turn LED ON
			GPIOA->ODR |= LED_PIN;
 8000252:	4b36      	ldr	r3, [pc, #216]	@ (800032c <command+0x114>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a35      	ldr	r2, [pc, #212]	@ (800032c <command+0x114>)
 8000258:	f043 0320 	orr.w	r3, r3, #32
 800025c:	6153      	str	r3, [r2, #20]
			// Send confirmation message
			char *message = "LED IS ON\n";
 800025e:	4b34      	ldr	r3, [pc, #208]	@ (8000330 <command+0x118>)
 8000260:	60bb      	str	r3, [r7, #8]
			for(int j=0;message[j]!='\0';j++)
 8000262:	2300      	movs	r3, #0
 8000264:	61fb      	str	r3, [r7, #28]
 8000266:	e009      	b.n	800027c <command+0x64>
			{
				uart2_write(message[j]);
 8000268:	69fb      	ldr	r3, [r7, #28]
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	4413      	add	r3, r2
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f93f 	bl	80004f4 <uart2_write>
			for(int j=0;message[j]!='\0';j++)
 8000276:	69fb      	ldr	r3, [r7, #28]
 8000278:	3301      	adds	r3, #1
 800027a:	61fb      	str	r3, [r7, #28]
 800027c:	69fb      	ldr	r3, [r7, #28]
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	4413      	add	r3, r2
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1ef      	bne.n	8000268 <command+0x50>
		if(strcmp(CommandBuffer,"LED_ON")==0)
 8000288:	e045      	b.n	8000316 <command+0xfe>
			}
		}
		// Check if received command is "LED_OFF"
		else if(strcmp(CommandBuffer,"LED_OFF")==0)
 800028a:	492a      	ldr	r1, [pc, #168]	@ (8000334 <command+0x11c>)
 800028c:	4825      	ldr	r0, [pc, #148]	@ (8000324 <command+0x10c>)
 800028e:	f7ff ffb9 	bl	8000204 <strcmp>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d11b      	bne.n	80002d0 <command+0xb8>
		{
			// Turn LED OFF
			GPIOA->ODR &= ~LED_PIN;
 8000298:	4b24      	ldr	r3, [pc, #144]	@ (800032c <command+0x114>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	4a23      	ldr	r2, [pc, #140]	@ (800032c <command+0x114>)
 800029e:	f023 0320 	bic.w	r3, r3, #32
 80002a2:	6153      	str	r3, [r2, #20]
			// Send confirmation message
			char *message = "LED IS OFF\n";
 80002a4:	4b24      	ldr	r3, [pc, #144]	@ (8000338 <command+0x120>)
 80002a6:	60fb      	str	r3, [r7, #12]
			for(int j=0;message[j]!='\0';j++)
 80002a8:	2300      	movs	r3, #0
 80002aa:	61bb      	str	r3, [r7, #24]
 80002ac:	e009      	b.n	80002c2 <command+0xaa>
			{
				uart2_write(message[j]);
 80002ae:	69bb      	ldr	r3, [r7, #24]
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	4413      	add	r3, r2
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f91c 	bl	80004f4 <uart2_write>
			for(int j=0;message[j]!='\0';j++)
 80002bc:	69bb      	ldr	r3, [r7, #24]
 80002be:	3301      	adds	r3, #1
 80002c0:	61bb      	str	r3, [r7, #24]
 80002c2:	69bb      	ldr	r3, [r7, #24]
 80002c4:	68fa      	ldr	r2, [r7, #12]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d1ef      	bne.n	80002ae <command+0x96>
		if(strcmp(CommandBuffer,"LED_ON")==0)
 80002ce:	e022      	b.n	8000316 <command+0xfe>
			}
		}
		// If command is not recognized, send error message
		else
		{
			char* message = "COMMAND ERROR";
 80002d0:	4b1a      	ldr	r3, [pc, #104]	@ (800033c <command+0x124>)
 80002d2:	613b      	str	r3, [r7, #16]
			for(int j=0;message[j]!='\0';j++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e009      	b.n	80002ee <command+0xd6>
			{
				uart2_write(message[j]);
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	693a      	ldr	r2, [r7, #16]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f906 	bl	80004f4 <uart2_write>
			for(int j=0;message[j]!='\0';j++)
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	3301      	adds	r3, #1
 80002ec:	617b      	str	r3, [r7, #20]
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	693a      	ldr	r2, [r7, #16]
 80002f2:	4413      	add	r3, r2
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d1ef      	bne.n	80002da <command+0xc2>
		if(strcmp(CommandBuffer,"LED_ON")==0)
 80002fa:	e00c      	b.n	8000316 <command+0xfe>
			}
		}
	}
	// Store received character in buffer if within limit
	else if(i < MAX_COMMAND_BUFFER-1)
 80002fc:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <command+0x108>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b12      	cmp	r3, #18
 8000302:	dc08      	bgt.n	8000316 <command+0xfe>
	{
		CommandBuffer[i++]=key;
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <command+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	1c5a      	adds	r2, r3, #1
 800030a:	4905      	ldr	r1, [pc, #20]	@ (8000320 <command+0x108>)
 800030c:	600a      	str	r2, [r1, #0]
 800030e:	4905      	ldr	r1, [pc, #20]	@ (8000324 <command+0x10c>)
 8000310:	79fa      	ldrb	r2, [r7, #7]
 8000312:	54ca      	strb	r2, [r1, r3]
	}
}
 8000314:	e7ff      	b.n	8000316 <command+0xfe>
 8000316:	bf00      	nop
 8000318:	3720      	adds	r7, #32
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000034 	.word	0x20000034
 8000324:	20000020 	.word	0x20000020
 8000328:	0800064c 	.word	0x0800064c
 800032c:	40020000 	.word	0x40020000
 8000330:	08000654 	.word	0x08000654
 8000334:	08000660 	.word	0x08000660
 8000338:	08000668 	.word	0x08000668
 800033c:	08000674 	.word	0x08000674

08000340 <main>:
#include "inputhandle.h"

char key;  // Variable to store received UART character

int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA (bit 0 of RCC AHB1 peripheral clock enable register)
    RCC->AHB1ENR = 1U << 0;
 8000344:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <main+0x40>)
 8000346:	2201      	movs	r2, #1
 8000348:	631a      	str	r2, [r3, #48]	@ 0x30

    // Configure PA5 as output (LED control)
    GPIOA->MODER |= (1U << 10);   // Set bit 10 (PA5 mode bit 0)
 800034a:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <main+0x44>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a0d      	ldr	r2, [pc, #52]	@ (8000384 <main+0x44>)
 8000350:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000354:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U << 11);  // Clear bit 11 (PA5 mode bit 1) -> Output mode
 8000356:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <main+0x44>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a0a      	ldr	r2, [pc, #40]	@ (8000384 <main+0x44>)
 800035c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000360:	6013      	str	r3, [r2, #0]

    // Initialize UART for transmission and reception
    uart2_rxtx_init();
 8000362:	f000 f855 	bl	8000410 <uart2_rxtx_init>

    // Infinite loop to continuously read data from UART and process commands
    while (1)
    {
        key = uart2_read();  // Read a character from UART
 8000366:	f000 f8b1 	bl	80004cc <uart2_read>
 800036a:	4603      	mov	r3, r0
 800036c:	461a      	mov	r2, r3
 800036e:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <main+0x48>)
 8000370:	701a      	strb	r2, [r3, #0]
        command(key);        // Pass the character to command handler function
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <main+0x48>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff4e 	bl	8000218 <command>
        key = uart2_read();  // Read a character from UART
 800037c:	bf00      	nop
 800037e:	e7f2      	b.n	8000366 <main+0x26>
 8000380:	40023800 	.word	0x40023800
 8000384:	40020000 	.word	0x40020000
 8000388:	20000038 	.word	0x20000038

0800038c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <NMI_Handler+0x4>

08000394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <HardFault_Handler+0x4>

0800039c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <MemManage_Handler+0x4>

080003a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a8:	bf00      	nop
 80003aa:	e7fd      	b.n	80003a8 <BusFault_Handler+0x4>

080003ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <UsageFault_Handler+0x4>

080003b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e2:	f000 f8ef 	bl	80005c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <SystemInit+0x20>)
 80003f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003f6:	4a05      	ldr	r2, [pc, #20]	@ (800040c <SystemInit+0x20>)
 80003f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00

08000410 <uart2_rxtx_init>:
	return ch;
}

/* UART2 initialization function */
void uart2_rxtx_init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	/****************Configure UART GPIO pin***************/
	/* Enable clock access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 8000414:	4b29      	ldr	r3, [pc, #164]	@ (80004bc <uart2_rxtx_init+0xac>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000418:	4a28      	ldr	r2, [pc, #160]	@ (80004bc <uart2_rxtx_init+0xac>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Set PA2 mode to alternate function mode for transmitter mode */
	GPIOA->MODER &=~(1U<<4);
 8000420:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a26      	ldr	r2, [pc, #152]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 8000426:	f023 0310 	bic.w	r3, r3, #16
 800042a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800042c:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a23      	ldr	r2, [pc, #140]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 8000432:	f043 0320 	orr.w	r3, r3, #32
 8000436:	6013      	str	r3, [r2, #0]

	/* Set PA3 to alternate function mode for receiver mode */
	GPIOA->MODER &= ~(1U<<6);
 8000438:	4b21      	ldr	r3, [pc, #132]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a20      	ldr	r2, [pc, #128]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 800043e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000442:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000444:	4b1e      	ldr	r3, [pc, #120]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a1d      	ldr	r2, [pc, #116]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 800044a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800044e:	6013      	str	r3, [r2, #0]

	/* Set PA2 alternate function type to UART_TX (AF07) */
	GPIOA->AFR[0] |= (1U<<8)|(1U<<9)|(1U<<10);
 8000450:	4b1b      	ldr	r3, [pc, #108]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 8000452:	6a1b      	ldr	r3, [r3, #32]
 8000454:	4a1a      	ldr	r2, [pc, #104]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 8000456:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800045a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800045c:	4b18      	ldr	r3, [pc, #96]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 800045e:	6a1b      	ldr	r3, [r3, #32]
 8000460:	4a17      	ldr	r2, [pc, #92]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 8000462:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000466:	6213      	str	r3, [r2, #32]

	/* Set PA3 to alternate function type to UART_RX (AF07) */
	GPIOA->AFR[0] &= ~(1U<<15);
 8000468:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 800046a:	6a1b      	ldr	r3, [r3, #32]
 800046c:	4a14      	ldr	r2, [pc, #80]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 800046e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000472:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((1U<<12)|(1U<<13)|(1U<<14));
 8000474:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	4a11      	ldr	r2, [pc, #68]	@ (80004c0 <uart2_rxtx_init+0xb0>)
 800047a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800047e:	6213      	str	r3, [r2, #32]

	/****************Configure UART module ***************/
	/* Enable clock access to UART2 */
	RCC->APB1ENR |= UART2EN;
 8000480:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <uart2_rxtx_init+0xac>)
 8000482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000484:	4a0d      	ldr	r2, [pc, #52]	@ (80004bc <uart2_rxtx_init+0xac>)
 8000486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800048a:	6413      	str	r3, [r2, #64]	@ 0x40

	/* Configure BaudRate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 800048c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000490:	490c      	ldr	r1, [pc, #48]	@ (80004c4 <uart2_rxtx_init+0xb4>)
 8000492:	480d      	ldr	r0, [pc, #52]	@ (80004c8 <uart2_rxtx_init+0xb8>)
 8000494:	f000 f846 	bl	8000524 <uart_set_baudrate>

	/* Configure the transfer direction (transmitter) */
	USART2->CR1 =  CR1_TE;
 8000498:	4b0b      	ldr	r3, [pc, #44]	@ (80004c8 <uart2_rxtx_init+0xb8>)
 800049a:	2208      	movs	r2, #8
 800049c:	60da      	str	r2, [r3, #12]

	/* Enable Receiver */
	USART2->CR1 |= CR1_RE;
 800049e:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <uart2_rxtx_init+0xb8>)
 80004a0:	68db      	ldr	r3, [r3, #12]
 80004a2:	4a09      	ldr	r2, [pc, #36]	@ (80004c8 <uart2_rxtx_init+0xb8>)
 80004a4:	f043 0304 	orr.w	r3, r3, #4
 80004a8:	60d3      	str	r3, [r2, #12]

	/* Enable UART module */
	USART2->CR1 |= CR1_UE;
 80004aa:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <uart2_rxtx_init+0xb8>)
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	4a06      	ldr	r2, [pc, #24]	@ (80004c8 <uart2_rxtx_init+0xb8>)
 80004b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004b4:	60d3      	str	r3, [r2, #12]
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40020000 	.word	0x40020000
 80004c4:	00f42400 	.word	0x00f42400
 80004c8:	40004400 	.word	0x40004400

080004cc <uart2_read>:

/* Function to read a character from UART2 */
char uart2_read(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	/* Make sure receive data register is not empty */
	while(!(USART2->SR & (1U<<5)))
 80004d0:	bf00      	nop
 80004d2:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <uart2_read+0x24>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f003 0320 	and.w	r3, r3, #32
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f9      	beq.n	80004d2 <uart2_read+0x6>
	{}
	return USART2->DR; // Return received character
 80004de:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <uart2_read+0x24>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	b2db      	uxtb	r3, r3
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40004400 	.word	0x40004400

080004f4 <uart2_write>:

/* Function to transmit a character using UART2 */
void uart2_write(int ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Make sure the transmit data register is empty */
	while(!(USART2->SR & SR_TXE)){}
 80004fc:	bf00      	nop
 80004fe:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <uart2_write+0x2c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <uart2_write+0xa>

  /* Write to transmit data register */
	USART2->DR =  (ch & 0xFF);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <uart2_write+0x2c>)
 800050e:	b2db      	uxtb	r3, r3
 8000510:	6053      	str	r3, [r2, #4]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40004400 	.word	0x40004400

08000524 <uart_set_baudrate>:

/* Function to set UART baud rate */
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk, BaudRate);
 8000530:	6879      	ldr	r1, [r7, #4]
 8000532:	68b8      	ldr	r0, [r7, #8]
 8000534:	f000 f808 	bl	8000548 <compute_uart_bd>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	609a      	str	r2, [r3, #8]
}
 8000540:	bf00      	nop
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <compute_uart_bd>:

/* Function to compute the UART baud rate register value */
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	085a      	lsrs	r2, r3, #1
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	441a      	add	r2, r3
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000560:	b29b      	uxth	r3, r3
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
	...

08000570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000574:	f7ff ff3a 	bl	80003ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	@ (80005b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	@ (80005bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800059e:	f000 f825 	bl	80005ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005a2:	f7ff fecd 	bl	8000340 <main>
  bx  lr    
 80005a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005b4:	08000694 	.word	0x08000694
  ldr r2, =_sbss
 80005b8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005bc:	20000040 	.word	0x20000040

080005c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC_IRQHandler>
	...

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	@ (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000000 	.word	0x20000000
 80005e8:	2000003c 	.word	0x2000003c

080005ec <__libc_init_array>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000624 <__libc_init_array+0x38>)
 80005f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000628 <__libc_init_array+0x3c>)
 80005f2:	1b64      	subs	r4, r4, r5
 80005f4:	10a4      	asrs	r4, r4, #2
 80005f6:	2600      	movs	r6, #0
 80005f8:	42a6      	cmp	r6, r4
 80005fa:	d109      	bne.n	8000610 <__libc_init_array+0x24>
 80005fc:	4d0b      	ldr	r5, [pc, #44]	@ (800062c <__libc_init_array+0x40>)
 80005fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000630 <__libc_init_array+0x44>)
 8000600:	f000 f818 	bl	8000634 <_init>
 8000604:	1b64      	subs	r4, r4, r5
 8000606:	10a4      	asrs	r4, r4, #2
 8000608:	2600      	movs	r6, #0
 800060a:	42a6      	cmp	r6, r4
 800060c:	d105      	bne.n	800061a <__libc_init_array+0x2e>
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f855 3b04 	ldr.w	r3, [r5], #4
 8000614:	4798      	blx	r3
 8000616:	3601      	adds	r6, #1
 8000618:	e7ee      	b.n	80005f8 <__libc_init_array+0xc>
 800061a:	f855 3b04 	ldr.w	r3, [r5], #4
 800061e:	4798      	blx	r3
 8000620:	3601      	adds	r6, #1
 8000622:	e7f2      	b.n	800060a <__libc_init_array+0x1e>
 8000624:	0800068c 	.word	0x0800068c
 8000628:	0800068c 	.word	0x0800068c
 800062c:	0800068c 	.word	0x0800068c
 8000630:	08000690 	.word	0x08000690

08000634 <_init>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	bf00      	nop
 8000638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063a:	bc08      	pop	{r3}
 800063c:	469e      	mov	lr, r3
 800063e:	4770      	bx	lr

08000640 <_fini>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	bf00      	nop
 8000644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000646:	bc08      	pop	{r3}
 8000648:	469e      	mov	lr, r3
 800064a:	4770      	bx	lr
